openapi: 3.0.0
info:
  title: HR Recruiter API — Candidates
  version: 1.0.0
  description: |
    OpenAPI спецификация для кандидатов.
    Самодостаточный файл для генерации и документации.
  contact:
    name: HR Recruiter Team
    email: support@hr-recruiter.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: http://localhost:8080/api/v1
    description: Local server
  - url: https://api.hr-recruiter.com/api/v1
    description: Production server
tags:
  - name: Candidates
    description: Управление кандидатами
paths:
  /candidates:
    get:
      operationId: listCandidates
      tags:
        - Candidates
      summary: Получить список всех кандидатов
      security:
        - AdminAuth: []
      parameters:
        - in: query
          name: positionId
          schema:
            type: integer
            format: int64
          description: Фильтр по ID вакансии
        - in: query
          name: search
          schema:
            type: string
          description: Поиск по имени или email
        - in: query
          name: page
          schema:
            type: integer
            default: 0
            minimum: 0
          description: Номер страницы (начиная с 0)
        - in: query
          name: size
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
          description: Размер страницы
        - in: query
          name: sort
          schema:
            type: string
            default: createdAt
          description: Поле для сортировки
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidatesPaginatedResponse'
    post:
      operationId: createCandidate
      tags:
        - Candidates
      summary: Создать кандидата
      security:
        - AdminAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CandidateCreateRequest'
      responses:
        '201':
          description: Кандидат создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Candidate'
  /candidates/login:
    post:
      operationId: loginCandidate
      tags:
        - Candidates
      summary: Логин кандидата (Публичный endpoint)
      description: |
        Публичный endpoint для логина кандидата.
        Доступно без авторизации.
        
        **Бизнес-логика:**
        1. Проверка существования вакансии по positionId
        2. Поиск или создание кандидата
        3. Проверка наличия активного собеседования для этой вакансии
        4. Отправка кода верификации на email
        
        **Безопасность:**
        - Требуется указать positionId вакансии (НЕ собеседования)
        - Проверяется наличие активного собеседования
        - Код верификации отправляется на email
        
        Возвращает данные кандидата и флаг необходимости верификации.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CandidateLoginRequest'
      responses:
        '200':
          description: Успешный логин, требуется верификация email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidateLoginResponse'
        '400':
          description: Неверные параметры запроса
        '500':
          description: Внутренняя ошибка сервера
      security: []

  /candidates/verify-email:
    post:
      operationId: verifyCandidateEmail
      tags:
        - Candidates
      summary: Верификация email кандидата (Публичный endpoint)
      description: |
        Публичный endpoint для верификации email кандидата.
        Доступно без авторизации.
        
        **Бизнес-логика:**
        1. Проверка кода верификации
        2. Подтверждение email кандидата
        3. Генерация JWT токена для авторизованного доступа
        
        **Безопасность:**
        - Требуется корректный код верификации
        - Email подтверждается только после успешной проверки кода
        - JWT выдается только верифицированным кандидатам
        
        Возвращает JWT токен для дальнейшей авторизации.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CandidateEmailVerificationRequest'
      responses:
        '200':
          description: Email успешно верифицирован, JWT токен выдан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidateEmailVerificationResponse'
        '400':
          description: Неверный код верификации
        '500':
          description: Внутренняя ошибка сервера
      security: []


  /candidates/{id}:
    get:
      operationId: getCandidate
      tags:
        - Candidates
      summary: Получить кандидата
      security:
        - AdminAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Candidate'
    put:
      operationId: updateCandidate
      tags:
        - Candidates
      summary: Обновить кандидата
      security:
        - AdminAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CandidateUpdateRequest'
      responses:
        '200':
          description: Кандидат обновлён
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Candidate'
    delete:
      operationId: deleteCandidate
      tags:
        - Candidates
      summary: Удалить кандидата по ID
      security:
        - AdminAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Кандидат успешно удален

  /positions/{positionId}/candidates:
    get:
      operationId: listPositionCandidates
      tags:
        - Candidates
      summary: Список кандидатов по вакансии
      security:
        - AdminAuth: []
      parameters:
        - in: path
          name: positionId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Candidate'
    post:
      operationId: createPositionCandidate
      tags:
        - Candidates
      summary: Добавить кандидата к вакансии
      security:
        - AdminAuth: []
      parameters:
        - in: path
          name: positionId
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CandidateCreateRequest'
      responses:
        '201':
          description: Кандидат добавлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Candidate'
components:
  schemas:
    BaseEntity:
      type: object
      properties:
        id:
          type: integer
          format: int64
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - createdAt

    CandidateCreateRequest:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
      required:
        - firstName
        - lastName
    CandidateUpdateRequest:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        name:
          type: string
        email:
          type: string
        status:
          $ref: '#/components/schemas/CandidateStatusEnum'
    CandidatesPaginatedResponse:
      allOf:
        - $ref: '#/components/schemas/PaginatedResponse'
      description: Пагинированный список кандидатов
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Candidate'
    CandidateLoginRequest:
      type: object
      required:
        - firstName
        - lastName
        - email
        - positionId
      properties:
        firstName:
          type: string
          description: Имя кандидата
        lastName:
          type: string
          description: Фамилия кандидата
        email:
          type: string
          format: email
          description: Email кандидата для логина
        positionId:
          type: integer
          format: int64
          description: ID вакансии (НЕ собеседования) для проверки доступа

    CandidateEmailVerificationRequest:
      type: object
      required:
        - email
        - verificationCode
      properties:
        email:
          type: string
          format: email
          description: Email кандидата для верификации
        verificationCode:
          type: string
          maxLength: 16
          description: Код верификации, отправленный на email

    CandidateLoginResponse:
      type: object
      required:
        - candidate
        - verificationRequired
      properties:
        candidate:
          $ref: '#/components/schemas/Candidate'
          description: Данные кандидата
        verificationRequired:
          type: boolean
          description: true - требуется верификация email, false - email уже верифицирован
        message:
          type: string
          description: Информационное сообщение для пользователя

    CandidateEmailVerificationResponse:
      type: object
      required:
        - success
        - candidate
      properties:
        success:
          type: boolean
          description: true - верификация успешна, false - верификация не удалась
        candidate:
          $ref: '#/components/schemas/Candidate'
          description: Данные кандидата
        token:
          type: string
          description: JWT токен для авторизованного доступа (только при успешной верификации)
        message:
          type: string
          description: Информационное сообщение о результате верификации


    Candidate:
      allOf:
        - $ref: '#/components/schemas/BaseCandidateFields'
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Уникальный идентификатор кандидата
        createdAt:
          type: string
          format: date-time
          description: Дата создания записи
        updatedAt:
          type: string
          format: date-time
          description: Дата последнего обновления
        emailVerified:
          type: boolean
          description: Статус верификации email
        emailVerificationCode:
          type: string
          description: Код верификации email
        emailVerificationExpiresAt:
          type: string
          format: date-time
          description: Время истечения кода верификации
        lastCodeSentAt:
          type: string
          format: date-time
          description: Время последней отправки кода
        codeAttempts:
          type: integer
          description: Количество попыток ввода кода
        blockedUntil:
          type: string
          format: date-time
          description: Время блокировки аккаунта
      required:
        - id
        - firstName
        - lastName
        - status
        - emailVerified

    BaseCandidateFields:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        name:
          type: string
        email:
          type: string
        status:
          $ref: '#/components/schemas/CandidateStatusEnum'
        resumeUrl:
          type: string
          description: URL резюме кандидата
        coverLetter:
          type: string
          description: Сопроводительное письмо
        experienceYears:
          type: integer
          description: Годы опыта работы
        skills:
          type: array
          items:
            type: string
          description: Навыки кандидата

    CandidateStatusEnum:
      type: string
      enum:
      - NEW
      - IN_PROGRESS
      - FINISHED
      - REJECTED
      - HIRED
    Interview:
      type: object
      properties:
        id:
          type: integer
        candidateId:
          type: integer
        positionId:
          type: integer
        status:
          type: string
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - candidateId
        - positionId
        - status
        - createdAt
    InterviewCandidateData:
      type: object
      # ... (вставьте полное определение из openapi-interviews.yaml) ...
    VoiceSessionStatusEnum:
      type: string
      enum:
      - CREATED
      - ACTIVE
      - ENDED
      - ERROR
    AgentTestRequest:
      type: object
      # ... (вставьте полное определение из openapi-interviews.yaml, если есть) ...
    PaginatedResponse:
      type: object
      description: Базовый класс для всех пагинированных ответов
      properties:
        content:
          type: array
          description: Список элементов на текущей странице
          items:
            type: object
        totalElements:
          type: integer
          format: int64
          description: Общее количество элементов
          example: 150
        totalPages:
          type: integer
          format: int64
          description: Общее количество страниц
          example: 15
        number:
          type: integer
          format: int64
          description: Номер текущей страницы (начиная с 0)
          example: 0
        size:
          type: integer
          format: int64
          description: Размер страницы
          example: 10
      required:
        - content
        - totalElements
        - totalPages
        - number
        - size
  securitySchemes:
    CandidateAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    AdminAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT 