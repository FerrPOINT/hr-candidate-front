openapi: 3.0.0
info:
  title: HR Recruiter API — Candidates
  version: 1.0.0
  description: |
    OpenAPI спецификация для кандидатов.
    Включает аутентификацию, процесс интервью и транскрибацию аудио ответов.
    Самодостаточный файл для генерации и документации.
  contact:
    name: HR Recruiter Team
    email: support@hr-recruiter.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: http://localhost:8080/api/v1
    description: Local server
  - url: https://api.hr-recruiter.com/api/v1
    description: Production server
tags:
  - name: Candidates
    description: Аутентификация, процесс интервью и транскрибация аудио ответов кандидатов
paths:

  /candidates/positions/{positionId}/summary:
    get:
      operationId: getCandidatePositionSummary
      tags:
        - Candidates
      summary: Получение краткой информации о вакансии (Публичный endpoint)
      description: |
        Публичный endpoint для получения краткой информации о вакансии.
        Доступно без авторизации для кандидатов.
        
        **Бизнес-логика:**
        1. Проверка существования вакансии по positionId
        2. Возврат только публичной информации (название, количество вопросов)
        3. Не возвращает конфиденциальные данные (описание, настройки, вопросы)
        
        **Безопасность:**
        - Доступно без аутентификации
        - Возвращает только публичную информацию
        - Не раскрывает внутренние детали вакансии
        
        Используется для отображения информации о вакансии кандидатам
        перед началом интервью.
      parameters:
        - name: positionId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: Уникальный идентификатор вакансии
      responses:
        '200':
          description: Краткая информация о вакансии
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PositionSummaryResponse'
        '404':
          description: Вакансия не найдена
        '500':
          description: Внутренняя ошибка сервера
      security: [ ]


  /candidates/login:
    post:
      operationId: loginCandidate
      tags:
        - Candidates
      summary: Логин кандидата (Публичный endpoint)
      description: |
        Публичный endpoint для логина кандидата. Доступно без авторизации.

        **Бизнес-логика:**
        1. Проверка существования вакансии по `positionId` и её готовности (наличие и озвучка всех вопросов)
        2. Поиск последнего интервью для пары (email, positionId)
        3. Если интервью НЕ найдено — автоматически создаётся первое интервью со статусом `NOT_STARTED`
        4. Если интервью найдено — повторное интервью автоматически НЕ создаётся (для повторного прохождения требуется ручное создание рекрутером)
        5. Отправка кода верификации на email и возврат данных интервью

        **Безопасность:**
        - Требуется указать `positionId` вакансии (НЕ собеседования)
        - Проверяется статус существующего интервью (`IN_PROGRESS`/`FINISHED` не допускаются для входа)
        - Код верификации отправляется на email

        Возвращает данные интервью и флаг необходимости верификации.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CandidateLoginRequest'
      responses:
        '200':
          description: Успешный логин, требуется верификация email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidateLoginResponse'
        '400':
          description: |
            Неверные параметры запроса или вакансия недоступна:
            - Вакансия не найдена
            - Вакансия временно приостановлена
            - Вакансия закрыта и больше не принимает заявки
            - Вакансия не готова к прохождению (отсутствуют вопросы или не озвучены)
            - У компании закончились собеседования
            - Собеседование уже начато/завершено
        '500':
          description: Внутренняя ошибка сервера
      security: [ ]

  /candidates/verify-email:
    post:
      operationId: verifyCandidateEmail
      tags:
        - Candidates
      summary: Верификация email кандидата (Публичный endpoint)
      description: |
        Публичный endpoint для верификации email кандидата.
        Доступно без авторизации.
        
        **Бизнес-логика:**
        1. Проверка кода верификации
        2. Подтверждение email кандидата
        3. Генерация JWT токена для авторизованного доступа
        
        **Безопасность:**
        - Требуется корректный код верификации
        - Email подтверждается только после успешной проверки кода
        - JWT выдается только верифицированным кандидатам
        
        Возвращает JWT токен для дальнейшей авторизации.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CandidateEmailVerificationRequest'
      responses:
        '200':
          description: Email успешно верифицирован, выдан JWT и возвращена информация об интервью
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidateEmailVerificationResponse'
        '400':
          description: Неверные параметры запроса
        '500':
          description: Внутренняя ошибка сервера
      security: [ ]

  /candidates/interview/{id}/data:
    get:
      operationId: getInterviewData
      tags: [ Candidates ]
      summary: Получить все данные для интервью
      description: |
        Возвращает все необходимые данные для проведения интервью в одном запросе:
        - Приветственные сообщения и тестовые данные
        - Завершающие сообщения
        - Дополнительные вопросы о компании
        - Информация об интервью и позиции
        
        Это позволяет фронтенду получить все данные одним запросом вместо нескольких отдельных.
      security: [ { CandidateAuth: [ ] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
          description: ID собеседования
      responses:
        '200':
          description: Все данные интервью успешно получены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterviewDataResponse'
        '401':
          description: Не авторизован
        '403':
          description: Собеседование не принадлежит кандидату
        '404':
          description: Собеседование не найдено

  /candidates/interview/{id}/test-microphone:
    post:
      operationId: testMicrophone
      tags: [ Candidates ]
      summary: Тестирование микрофона
      description: |
        Проверяет качество микрофона кандидата перед началом интервью.
        Транскрибирует тестовое аудио и возвращает оценку качества.
      security: [ { CandidateAuth: [ ] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
          description: ID собеседования
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - audio
              properties:
                audio:
                  type: string
                  format: binary
                  description: Тестовое аудио для проверки микрофона
      responses:
        '200':
          description: Микрофон успешно протестирован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MicrophoneTestResponse'
        '400':
          description: Некорректные данные
        '403':
          description: Собеседование не принадлежит кандидату
        '404':
          description: Собеседование не найдено

  /candidates/interview/{id}/start:
    post:
      operationId: startInterview
      tags: [ Candidates ]
      summary: Начать интервью
      description: Позволяет кандидату самостоятельно начать собеседование
      security: [ { CandidateAuth: [ ] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
          description: ID собеседования
      responses:
        '200':
          description: Интервью успешно начато кандидатом
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterviewStartResponse'
        '400':
          description: Некорректные параметры или собеседование уже начато
        '403':
          description: Собеседование не принадлежит данному кандидату
        '404':
          description: Собеседование не найдено

  /candidates/interview/{id}/question:
    get:
      operationId: getCurrentQuestion
      tags: [ Candidates ]
      summary: Получить текущий вопрос
      description: |
        Возвращает следующий неотвеченный вопрос для интервью.
        
        **Валидации:**
        1. Интервью должно быть в статусе IN_PROGRESS
        2. Кандидат должен иметь доступ к интервью
        
        **Логика:**
        - Получает список вопросов из позиции
        - Находит следующий неотвеченный вопрос
        - Возвращает вопрос с метаданными и прогрессом
      security: [ { CandidateAuth: [ ] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
          description: ID собеседования
      responses:
        '200':
          description: Вопрос успешно получен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterviewQuestionResponse'
        '400':
          description: |
            Некорректные данные:
            - Интервью не стартовано
            - Интервью уже завершено
        '403':
          description: Собеседование не принадлежит кандидату
        '404':
          description: Собеседование не найдено или все вопросы отвечены

  /candidates/interview/{id}/answer:
    post:
      operationId: submitAnswer
      tags: [ Candidates ]
      summary: Отправить ответ на вопрос
      description: |
        Отправляет ответ на вопрос интервью.
        
        **Варианты ответа:**
        1. **Аудио ответ** - отправляется аудио файл для транскрибации
        2. **Пропуск вопроса** - устанавливается параметр skip=true (аудио не требуется)
        
        **Процесс:**
        1. При аудио ответе - файл транскрибируется
        2. При пропуске - сохраняется пустой ответ
        3. Ответ сохраняется в базе данных
        4. Возвращается информация о прогрессе
      security: [ { CandidateAuth: [ ] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
          description: ID собеседования
        - in: query
          name: questionId
          required: true
          schema: { type: integer, format: int64 }
          description: ID вопроса
        - in: query
          name: skip
          required: false
          schema: { type: boolean, default: false }
          description: Пропустить вопрос (не отправлять аудио)
      requestBody:
        required: false
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                audioFile:
                  type: string
                  format: binary
                  description: Аудио файл с ответом (не требуется при skip=true)
      responses:
        '200':
          description: Ответ успешно отправлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmitAnswerResponse'
        '400':
          description: |
            Некорректные данные:
            - Отсутствует аудио файл при skip=false
            - Аудио файл отправлен при skip=true
            - Некорректный формат файла
        '403':
          description: Собеседование не принадлежит кандидату
        '404':
          description: Собеседование или вопрос не найдены

  /candidates/interview/{id}/end:
    post:
      operationId: endInterview
      tags: [ Candidates ]
      summary: Завершить интервью
      description: |
        Позволяет кандидату завершить собеседование.
        После завершения интервью нельзя будет продолжить отвечать на вопросы.
      security: [ { CandidateAuth: [ ] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
          description: ID собеседования
      responses:
        '200':
          description: Интервью успешно завершено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterviewEndResponse'
        '400':
          description: Интервью уже завершено или некорректные параметры
        '403':
          description: Собеседование не принадлежит кандидату
        '404':
          description: Собеседование не найдено



components:
  schemas:
    InterviewStartResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Уникальный идентификатор собеседования
        status:
          $ref: '#/components/schemas/InterviewStatusEnum'
          description: Статус собеседования
        startedAt:
          type: string
          format: date-time
          description: Время начала собеседования
        estimatedDuration:
          type: integer
          description: Ориентировочная продолжительность в минутах
        questionsCount:
          type: integer
          description: Количество вопросов в собеседовании
        currentQuestionIndex:
          type: integer
          description: Индекс текущего вопроса
        instructions:
          type: string
          description: Инструкции для кандидата
      required:
        - id
        - status
        - startedAt
        - questionsCount
        - currentQuestionIndex

    BaseEntity:
      type: object
      properties:
        id:
          type: integer
          format: int64
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - createdAt

    BaseCandidateFields:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        name:
          type: string
        email:
          type: string
        status:
          $ref: '#/components/schemas/CandidateStatusEnum'

    CandidateStatusEnum:
      type: string
      enum:
        - NEW
        - IN_PROGRESS
        - FINISHED
        - REJECTED
        - HIRED

    InterviewResultEnum:
      type: string
      enum:
        - SUCCESSFUL
        - UNSUCCESSFUL
        - ERROR
      description: Результат собеседования

    Interview:
      allOf:
        - $ref: '#/components/schemas/BaseEntity'
        - $ref: '#/components/schemas/BaseCandidateFields'
      type: object
      properties:
        emailVerified:
          type: boolean
          description: Статус верификации email
        emailVerificationCode:
          type: string
          description: Код верификации email
        emailVerificationExpiresAt:
          type: string
          format: date-time
          description: Время истечения кода верификации
        lastCodeSentAt:
          type: string
          format: date-time
          description: Время последней отправки кода
        codeAttempts:
          type: integer
          description: Количество попыток ввода кода
        blockedUntil:
          type: string
          format: date-time
          description: Время блокировки аккаунта
      required:
        - firstName
        - lastName
        - status
        - emailVerified

    PaginatedResponse:
      type: object
      description: Базовый класс для всех пагинированных ответов
      properties:
        content:
          type: array
          description: Список элементов на текущей странице
          items:
            type: object
        totalElements:
          type: integer
          format: int64
          description: Общее количество элементов
          example: 150
        totalPages:
          type: integer
          format: int64
          description: Общее количество страниц
          example: 15
        number:
          type: integer
          format: int64
          description: Номер текущей страницы (начиная с 0)
          example: 0
        size:
          type: integer
          format: int64
          description: Размер страницы
          example: 10
      required:
        - content
        - totalElements
        - totalPages
        - number
        - size

    CandidateLoginRequest:
      type: object
      required:
        - firstName
        - lastName
        - email
        - positionId
      properties:
        firstName:
          type: string
          description: Имя кандидата
        lastName:
          type: string
          description: Фамилия кандидата
        email:
          type: string
          format: email
          description: Email кандидата для логина
        positionId:
          type: integer
          format: int64
          description: ID вакансии (НЕ собеседования) для проверки доступа

    CandidateEmailVerificationRequest:
      type: object
      required:
        - email
        - verificationCode
      properties:
        email:
          type: string
          format: email
          description: Email кандидата для верификации
        verificationCode:
          type: string
          maxLength: 16
          description: Код верификации, отправленный на email

    CandidateLoginResponse:
      type: object
      required:
        - interview
        - verificationRequired
      properties:
        interview:
          $ref: '#/components/schemas/Interview'
          description: Данные кандидата
        verificationRequired:
          type: boolean
          description: true - требуется верификация email, false - email уже верифицирован
        token:
          type: string
          nullable: true
          description: JWT токен для авторизации (выдается только если verificationRequired=false)
        message:
          type: string
          description: Информационное сообщение для пользователя

    CandidateEmailVerificationResponse:
      type: object
      required:
        - success
        - token
        - interview
      properties:
        success:
          type: boolean
          description: true - верификация успешна, false - верификация не удалась
        message:
          type: string
          description: Информационное сообщение о результате верификации
        token:
          type: string
          description: JWT токен для авторизованного доступа (только при успешной верификации)
        interview:
          type: object
          description: Основная информация об интервью (без служебных полей)
          properties:
            id:
              type: integer
              format: int64
              description: ID интервью
            firstName:
              type: string
              description: Имя кандидата
            lastName:
              type: string
              description: Фамилия кандидата
            email:
              type: string
              format: email
              description: Email кандидата
            emailVerified:
              type: boolean
              description: Признак подтверждения email
            positionId:
              type: integer
              format: int64
              description: ID позиции (вакансии), с которой связано интервью
          required:
            - id
            - firstName
            - lastName
            - email
            - emailVerified
            - positionId

    InterviewQuestionResponse:
      type: object
      properties:
        questionId:
          type: integer
          format: int64
          description: ID вопроса
        text:
          type: string
          description: Текст вопроса
        audioUrl:
          type: string
          description: URL аудиофайла с озвучкой вопроса
        index:
          type: integer
          description: Индекс вопроса в интервью (начиная с 1)
        total:
          type: integer
          description: Общее количество вопросов в интервью
        answered:
          type: integer
          description: Количество уже отвеченных вопросов
        canAnswer:
          type: boolean
          description: Можно ли отвечать на этот вопрос (true для следующего неотвеченного)
        alreadyAnswered:
          type: boolean
          description: Уже отвечен ли этот вопрос
        maxAnswerDuration:
          type: integer
          description: Максимальное время для ответа в секундах

    SubmitAnswerResponse:
      type: object
      properties:
        success:
          type: boolean
          description: true - ответ успешно сохранен
        message:
          type: string
          description: Сообщение о результате
        nextQuestion:
          type: boolean
          description: true - есть следующий вопрос, false - интервью завершено
        progressPercent:
          type: integer
          description: Прогресс интервью в процентах (0-100)

    MicrophoneTestResponse:
      type: object
      properties:
        transcript:
          type: string
          description: Транскрибированный текст
          example: "Привет, меня зовут Иван, я разработчик"
        confidence:
          type: number
          format: float
          minimum: 0.0
          maximum: 1.0
          description: |
            Уверенность в распознавании речи (0.0-1.0).
            Помогает оценить качество микрофона:
            - 0.0-0.3: Плохо (много шума, неразборчивая речь)
            - 0.3-0.6: Средне (есть помехи, но текст понятен)
            - 0.6-0.8: Хорошо (чистая речь, мало помех)
            - 0.8-1.0: Отлично (идеальное качество, четкая речь)
          example: 0.85
        qualityAssessment:
          type: string
          description: Оценка качества микрофона на основе confidence
          example: "Отлично"
        recommendations:
          type: array
          items:
            type: string
          description: Рекомендации по улучшению качества микрофона
          example: [ "Микрофон работает идеально", "Можно начинать собеседование" ]
        isReadyForInterview:
          type: boolean
          description: Готов ли микрофон для проведения интервью
          example: true

    WelcomeMessagesResponse:
      type: object
      properties:
        messages:
          type: array
          items:
            type: object
            properties:
              text:
                type: string
                description: Текст вступительного сообщения
              audioUrl:
                type: string
                description: URL аудиофайла с озвучкой сообщения
          description: Список вступительных сообщений для ознакомления с процессом
      required:
        - messages

    AdditionalQuestionsResponse:
      type: array
      items:
        type: object
        properties:
          question:
            type: string
            description: Текст дополнительного вопроса
          answer:
            type: string
            description: Ответ кандидата на дополнительный вопрос
      description: Список дополнительных вопросов с ответами кандидата

    InterviewEndResponse:
      type: object
      properties:
        success:
          type: boolean
          description: true - интервью успешно завершено
        message:
          type: string
          description: Сообщение о результате завершения
        completedAt:
          type: string
          format: date-time
          description: Время завершения интервью
        totalQuestions:
          type: integer
          description: Общее количество вопросов в интервью
        answeredQuestions:
          type: integer
          description: Количество отвеченных вопросов
      required:
        - success
        - completedAt
        - totalQuestions
        - answeredQuestions

    CompletionResponse:
      type: object
      properties:
        messages:
          type: array
          items:
            type: object
            properties:
              text:
                type: string
                description: Текст завершающего сообщения
              audioUrl:
                type: string
                description: URL аудиофайла с озвучкой сообщения
          description: Список завершающих сообщений для кандидата
      required:
        - messages

    PositionSummaryResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Уникальный идентификатор вакансии
        title:
          type: string
          description: Название вакансии
        questionsCount:
          type: integer
          description: Количество вопросов в интервью
      required:
        - id
        - title
        - questionsCount

    InterviewDataResponse:
      type: object
      properties:
        welcome:
          $ref: '#/components/schemas/WelcomeMessagesResponse'
          description: Приветственные сообщения
        test:
          type: object
          properties:
            testPreMessage:
              type: object
              properties:
                text:
                  type: string
                  description: Текст предварительного сообщения
                audioUrl:
                  type: string
                  description: URL аудиофайла с предварительным сообщением
              description: Сообщение-инструкция перед тестовым сообщением
            testMessage:
              type: object
              properties:
                text:
                  type: string
                  description: Текст тестового сообщения
                audioUrl:
                  type: string
                  description: URL аудиофайла с тестовым сообщением
              description: Тестовое сообщение для проверки аудио
            testPositiveResponses:
              type: array
              items:
                type: object
                properties:
                  text:
                    type: string
                    description: Текст позитивного ответа
                  audioUrl:
                    type: string
                    description: URL аудиофайла с позитивным ответом
              description: Позитивные ответы на тест
            testNegativeResponses:
              type: array
              items:
                type: object
                properties:
                  text:
                    type: string
                    description: Текст негативного ответа
                  audioUrl:
                    type: string
                    description: URL аудиофайла с негативным ответом
              description: Негативные ответы на тест
          description: Тестовые данные для проверки микрофона
          required:
            - testPreMessage
        completion:
          $ref: '#/components/schemas/CompletionResponse'
          description: Завершающие сообщения
        additionalQuestions:
          $ref: '#/components/schemas/AdditionalQuestionsResponse'
          description: Дополнительные вопросы о компании
        interview:
          type: object
          properties:
            id:
              type: integer
              format: int64
              description: ID интервью
            status:
              $ref: '#/components/schemas/InterviewStatusEnum'
              description: Статус интервью
            position:
              $ref: '#/components/schemas/PositionSummaryResponse'
              description: Информация о позиции
            questionIds:
              type: array
              items:
                type: integer
                format: int64
              description: Список ID вопросов в порядке их появления в интервью
            answerTime:
              type: integer
              description: Время на ответ на один вопрос в секундах
              example: 150
          required:
            - id
            - status
            - position
            - questionIds
          description: Информация об интервью и позиции
    
    InterviewStatusEnum:
      type: string
      enum: [ NOT_STARTED, IN_PROGRESS, FINISHED ]
      description: Статус интервью/собеседования

  securitySchemes:
    CandidateAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT токен для кандидатов