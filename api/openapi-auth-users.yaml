openapi: 3.0.0
info:
  title: HR Recruiter API — Auth & Users
  version: 1.0.0
  description: |
    OpenAPI спецификация для аутентификации, пользователей, команд и аккаунта.
    Самодостаточный файл для генерации и документации.
  contact:
    name: HR Recruiter Team
    email: support@hr-recruiter.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: http://localhost:8080/api/v1
    description: Local server
  - url: https://api.hr-recruiter.com/api/v1
    description: Production server
tags:
  - name: Auth
    description: Аутентификация и управление сессиями
  - name: Team & Users
    description: Управление командой и пользователями
  - name: Account
    description: Управление аккаунтом текущего пользователя
paths:
  /auth/login:
    post:
      operationId: login
      tags:
        - Auth
      summary: Вход пользователя (Публичный endpoint)
      description: |
        Публичный endpoint для входа в систему.
        Доступен для всех ролей: admin, recruiter, viewer.
        Доступно без авторизации.
        Возвращает JWT токен для дальнейшей авторизации.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Успешный вход
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /auth/logout:
    post:
      operationId: logout
      tags:
        - Auth
      summary: Выход пользователя
      description: |
        Выход из системы для всех ролей.
        Доступен для: admin, recruiter, viewer.
        Инвалидирует текущий JWT токен.
      security:
        - AdminAuth: []
      responses:
        '204':
          description: Успешный выход
  /users:
    get:
      operationId: listUsers
      tags:
        - Team & Users
      summary: Список пользователей
      security:
        - AdminAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 0
            minimum: 0
          description: Номер страницы (начиная с 0)
        - in: query
          name: size
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
          description: Размер страницы
        - in: query
          name: sort
          schema:
            type: string
            default: createdAt
          description: Поле для сортировки
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersPaginatedResponse'
    post:
      operationId: createUser
      tags:
        - Team & Users
      summary: Создать пользователя
      security:
        - AdminAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/{id}:
    get:
      operationId: getUser
      tags:
        - Team & Users
      summary: Получить пользователя
      security:
        - AdminAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      operationId: updateUser
      tags:
        - Team & Users
      summary: Обновить пользователя
      security:
        - AdminAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
      responses:
        '200':
          description: Пользователь обновлён
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      operationId: deleteUser
      tags:
        - Team & Users
      summary: Удалить пользователя по ID
      security:
        - AdminAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Пользователь успешно удален
  /team:
    get:
      operationId: getTeam
      tags:
        - Team & Users
      summary: Получить информацию о команде
      description: |
        Получение списка всех пользователей команды.
        Доступен только для роли: admin.
        Recruiter и viewer не могут видеть других пользователей.
        Возвращает полную информацию о всех пользователях системы.
      security:
        - AdminAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /account:
    get:
      operationId: getAccount
      tags:
        - Account
      summary: Получить профиль текущего пользователя
      description: |
        Получение профиля текущего пользователя.
        Доступен для всех ролей: admin, recruiter, viewer.
        Возвращает данные только текущего пользователя.
      security:
        - AdminAuth: []
      responses:
        '200':
          description: Профиль пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      operationId: updateAccount
      tags:
        - Account
      summary: Обновить профиль текущего пользователя
      description: |
        Обновление профиля текущего пользователя.
        Доступен для всех ролей: admin, recruiter, viewer.
        Можно обновлять только свой профиль.
      security:
        - AdminAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
      responses:
        '200':
          description: Профиль обновлён
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
components:
  securitySchemes:
    CandidateAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    AdminAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    AuthResponse:
      type: object
      properties:
        token:
          type: string
        user:
          $ref: '#/components/schemas/User'
      required:
        - token
        - user
    LoginRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password
    User:
      type: object
      properties:
        id:
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        role:
          $ref: '#/components/schemas/RoleEnum'
        avatarUrl:
          type: string
        language:
          type: string
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        teamId:
          type: integer
          nullable: true
      required:
        - id
        - firstName
        - lastName
        - email
        - role
        - isActive
        - createdAt
        - updatedAt
    GetUserInfo200Response:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
      required:
        - user
    UserCreateRequest:
      type: object
      properties:
        firstName:
          type: string
          description: Имя пользователя
        lastName:
          type: string
          description: Фамилия пользователя
        email:
          type: string
        role:
          $ref: '#/components/schemas/RoleEnum'
        avatarUrl:
          type: string
        language:
          type: string
        password:
          type: string
      required:
        - firstName
        - lastName
        - email
        - role
        - password
    UserUpdateRequest:
      allOf:
        - $ref: '#/components/schemas/BaseUserFields'
    UsersPaginatedResponse:
      type: object
      description: Пагинированный список пользователей
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/User'
        totalElements:
          type: integer
          format: int64
          description: Общее количество элементов
          example: 150
        totalPages:
          type: integer
          format: int64
          description: Общее количество страниц
          example: 15
        number:
          type: integer
          format: int64
          description: Номер текущей страницы (начиная с 0)
          example: 0
        size:
          type: integer
          format: int64
          description: Размер страницы
          example: 10
      required:
        - content
        - totalElements
        - totalPages
        - number
        - size
    BaseUserFields:
      type: object
      properties:
        firstName:
          type: string
          description: Имя пользователя
        lastName:
          type: string
          description: Фамилия пользователя
        email:
          type: string
        role:
          $ref: '#/components/schemas/RoleEnum'
        avatarUrl:
          type: string
        language:
          type: string
    RoleEnum:
      type: string
      enum:
      - ADMIN
      - RECRUITER
      - VIEWER
    BaseEntity:
      type: object
      properties:
        id:
          type: integer
          format: int64
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - createdAt
    PaginatedResponse:
      type: object
      description: Базовый класс для всех пагинированных ответов
      properties:
        content:
          type: array
          description: Список элементов на текущей странице
          items:
            type: object
        totalElements:
          type: integer
          format: int64
          description: Общее количество элементов
          example: 150
        totalPages:
          type: integer
          format: int64
          description: Общее количество страниц
          example: 15
        number:
          type: integer
          format: int64
          description: Номер текущей страницы (начиная с 0)
          example: 0
        size:
          type: integer
          format: int64
          description: Размер страницы
          example: 10
      required:
        - content
        - totalElements
        - totalPages
        - number
        - size
    Interview:
      type: object
      properties:
        id: { type: integer }
        candidateId: { type: integer }
        positionId: { type: integer }
        status: { $ref: '#/components/schemas/InterviewStatusEnum' }
        result: { $ref: '#/components/schemas/InterviewResultEnum' }
        createdAt: { type: string, format: date-time, description: Дата создания собеседования }
        startedAt: { type: string, format: date-time, description: Дата начала собеседования }
        finishedAt: { type: string, format: date-time, description: Дата окончания собеседования }
        transcript: { type: string }
        audioUrl: { type: string }
        videoUrl: { type: string }
        aiScore: { type: number }
        notes: { type: string, description: Заметки по интервью }
        voiceSessionId: { type: string, description: ID голосовой сессии в ElevenLabs }
        voiceAgentId: { type: string, description: ID агента в ElevenLabs }
        voiceEnabled: { type: boolean, description: Включено ли голосовое интервью }
        voiceLanguage: { type: string, description: Язык голосового интервью }
        voiceVoiceId: { type: string, description: ID голоса в ElevenLabs }
        voiceStartedAt: { type: string, format: date-time, description: Время начала голосовой сессии }
        voiceFinishedAt: { type: string, format: date-time, description: Время завершения голосовой сессии }
        answers:
          type: array
          items:
            $ref: '#/components/schemas/InterviewAnswer'
        candidate:
          $ref: '#/components/schemas/Candidate'
          description: Данные кандидата
      required:
        - id
        - candidateId
        - positionId
        - status
        - createdAt
    InterviewAnswer:
      type: object
      properties:
        id: { type: integer, format: int64 }
        interviewId: { type: integer, format: int64 }
        questionId: { type: integer, format: int64 }
        answerText: { type: string }
        audioUrl: { type: string }
        videoUrl: { type: string }
        rawTranscription: { type: string, description: Сырой транскрибированный текст }
        formattedTranscription: { type: string, description: Отформатированный текст }
        transcript: { type: string, description: Транскрибированный текст (alias для formattedTranscription) }
        score: { type: number, format: float, description: Оценка ответа от 0 до 100 }
        scoreJustification: { type: string, description: Обоснование оценки }
        feedback: { type: string, description: Обратная связь по ответу }
        durationSeconds: { type: integer, description: Длительность ответа в секундах }
        isCorrect: { type: boolean, description: Правильность ответа для вопросов типа CHOICE }
        voiceSessionId: { type: string, description: ID голосовой сессии }
        voiceConfidence: { type: number, format: float, description: Уверенность в распознавании речи (0.0-1.0) }
        voiceEmotion: { type: string, description: Определённая эмоция в голосе }
        voiceSpeakerId: { type: string, description: ID говорящего }
        voiceAudioUrl: { type: string, description: URL аудио файла ответа }
        voiceProcessingTime: { type: integer, format: int64, description: Время обработки в миллисекундах }
        voiceQualityScore: { type: number, format: float, description: Оценка качества аудио (0.0-1.0) }
        createdAt: { type: string, format: date-time }
      required:
        - id
        - interviewId
        - questionId
    InterviewStatusEnum:
      type: string
      enum:
      - NOT_STARTED
      - IN_PROGRESS
      - FINISHED
    InterviewResultEnum:
      type: string
      enum:
      - SUCCESSFUL
      - UNSUCCESSFUL
      - ERROR
    Candidate:
      type: object
      properties:
        id: { type: integer, format: int64 }
        firstName: { type: string }
        lastName: { type: string }
        name: { type: string }
        email: { type: string }
        status: { type: string }
        positionId: { type: integer }
        resumeUrl: { type: string }
        coverLetter: { type: string }
        experienceYears: { type: integer }
        skills: { type: array, items: { type: string } }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
      required:
        - id
        - firstName
        - lastName
        - name
        - email
        - status
        - positionId
        - createdAt
        - updatedAt
    InterviewCandidateData:
      type: object
      properties:
        interview:
          type: object
          properties:
            id: { type: integer, format: int64 }
            status: { $ref: '#/components/schemas/InterviewStatusEnum' }
            createdAt: { type: string, format: date-time }
            startedAt: { type: string, format: date-time }
            finishedAt: { type: string, format: date-time }
          required:
            - id
            - status
            - createdAt
        settings:
          type: object
          properties:
            answerTime: { type: integer, description: Время на ответ в секундах, example: 120 }
            language: { type: string, description: Язык интервью, example: Русский }
            saveAudio: { type: boolean, description: Сохранять аудио, example: true }
            saveVideo: { type: boolean, description: Сохранять видео, example: false }
            randomOrder: { type: boolean, description: Случайный порядок вопросов, example: false }
            minScore: { type: number, format: float, description: Минимальный проходной балл, example: 70.0 }
          required:
            - answerTime
            - language
            - saveAudio
            - saveVideo
            - randomOrder
            - minScore
        questions:
          type: array
          items:
            type: object
            properties:
              id: { type: integer, format: int64 }
              text: { type: string }
              type: { $ref: '#/components/schemas/QuestionTypeEnum' }
              order: { type: integer }
              isRequired: { type: boolean }
            required:
              - id
              - text
              - type
              - order
          description: Список вопросов для интервью
        position:
          type: object
          properties:
            title: { type: string, description: Название вакансии, example: Java Developer }
            level: { $ref: '#/components/schemas/PositionLevelEnum' }
          required:
            - title
            - level
        progress:
          type: object
          properties:
            currentQuestion: { type: integer, example: 0 }
            totalQuestions: { type: integer, example: 5 }
            answeredQuestions: { type: integer, example: 0 }
            remainingTime: { type: integer, example: 600 }
          required:
            - currentQuestion
            - totalQuestions
            - answeredQuestions
            - remainingTime
        checklist:
          type: array
          items:
            type: object
            properties:
              text: { type: string }
              completed: { type: boolean }
            required:
              - text
              - completed
          description: Чек-лист для подготовки к интервью
        inviteInfo:
          type: object
          properties:
            language: { type: string, example: Русский }
            questionsCount: { type: integer, example: 5 }
            estimatedDuration: { type: integer, example: 15 }
          required:
            - language
            - questionsCount
            - estimatedDuration
      required:
        - interview
        - settings
        - questions
        - position
        - progress
        - checklist
        - inviteInfo
    InterviewCandidateDataChecklistInner:
      type: object
      properties:
        text: { type: string }
        completed: { type: boolean }
      required:
        - text
        - completed
    InterviewCandidateDataInterview:
      type: object
      properties:
        id: { type: integer, format: int64 }
        status: { $ref: '#/components/schemas/InterviewStatusEnum' }
        createdAt: { type: string, format: date-time }
        startedAt: { type: string, format: date-time }
        finishedAt: { type: string, format: date-time }
      required:
        - id
        - status
        - createdAt
    InterviewCandidateDataInviteInfo:
      type: object
      properties:
        language: { type: string, example: Русский }
        questionsCount: { type: integer, example: 5 }
        estimatedDuration: { type: integer, example: 15 }
      required:
        - language
        - questionsCount
        - estimatedDuration
    QuestionTypeEnum:
      type: string
      enum:
      - TEXT
      - AUDIO
      - VIDEO
      - CHOICE
    PositionLevelEnum:
      type: string
      enum:
      - JUNIOR
      - MIDDLE
      - SENIOR
      - LEAD
    Team:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
      required:
        - id
        - name 