openapi: 3.0.0
info:
  title: HR Recruiter API — Agents & AI
  version: 1.0.0
  description: |
    OpenAPI спецификация для AI-агентов и AI-интеграций (генерация вакансий, транскрибация аудио, обработка ответов).
    Самодостаточный файл для генерации и документации.
  contact:
    name: HR Recruiter Team
    email: support@hr-recruiter.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: http://localhost:8080/api/v1
    description: Local server
  - url: https://api.hr-recruiter.com/api/v1
    description: Production server
tags:
  - name: Agents
    description: Управление AI-агентами для интервью
  - name: AI
    description: Взаимодействие с AI-ассистентом
paths:
  /agents:
    get:
      operationId: listAgents
      tags:
        - Agents
      summary: Получить список агентов
      description: Возвращает список всех агентов в системе
      security:
        - AdminAuth: []
      parameters:
        - in: query
          name: type
          schema: { $ref: '#/components/schemas/AgentTypeEnum' }
          description: Фильтр по типу агента
        - in: query
          name: status
          schema: { $ref: '#/components/schemas/AgentStatusEnum' }
          description: Фильтр по статусу агента
      responses:
        '200':
          description: Список агентов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Agent'
    post:
      operationId: createAgent
      tags:
        - Agents
      summary: Создать нового агента
      description: Создаёт нового voice-агента (тип ELABS_VOICE) с указанным голосом
      security:
        - AdminAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgentCreateRequest'
      responses:
        '201':
          description: Агент создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agent'
        '400':
          description: Некорректные данные
  /agents/default:
    get:
      operationId: getDefaultAgent
      tags:
        - Agents
      summary: Получить агента по умолчанию
      security:
        - AdminAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agent'
    post:
      operationId: setDefaultAgent
      tags:
        - Agents
      summary: Установить агента по умолчанию
      security:
        - AdminAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                agentId:
                  type: integer
                  format: int64
      responses:
        '204':
          description: OK
  /agents/{id}:
    get:
      operationId: getAgent
      tags: [Agents]
      summary: Получить агента по ID
      description: Возвращает информацию о конкретном агенте
      security: [{ AdminAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
          description: ID агента
      responses:
        '200':
          description: Информация об агенте
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agent'
        '404':
          description: Агент не найден
    put:
      operationId: updateAgent
      tags: [Agents]
      summary: Обновить голос агента
      description: Обновляет voiceId агента
      security: [{ AdminAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
          description: ID агента
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgentUpdateRequest'
      responses:
        '200':
          description: Голос агента обновлён
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agent'
        '404':
          description: Агент не найден
    delete:
      operationId: deleteAgent
      tags: [Agents]
      summary: Удалить агента
      description: Удаляет агента из системы
      security: [{ AdminAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
          description: ID агента
      responses:
        '204':
          description: Агент удалён
        '404':
          description: Агент не найден
  /ai/transcribe:
    post:
      operationId: transcribeAudio
      tags:
        - AI
      security:
        - AdminAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - audio
              properties:
                audio:
                  type: string
                  format: binary
                  description: Аудио файл для транскрибации
      responses:
        '200':
          description: Аудио успешно транскрибировано
          content:
            application/json:
              schema:
                type: object
                properties:
                  transcript:
                    type: string
                    description: Транскрибированный текст
  /ai/generate-position:
    post:
      operationId: generatePosition
      tags:
        - AI
      summary: Генерировать вакансию с помощью AI
      description: |
        Генерирует структуру вакансии на основе описания пользователя.
        AI возвращает минимальный набор полей (title, description, topics, level, questions).
      security:
        - AdminAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PositionAiGenerationRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PositionAiGenerationResponse'
        '400':
          description: Bad Request - некорректные входные данные
        '500':
          description: Internal Server Error - ошибка AI или системы
  /ai/generate-position-data:
    post:
      operationId: generatePositionData
      tags:
        - AI
      summary: Сгенерировать данные для вакансии на основе описания
      security:
        - AdminAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PositionDataGenerationRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PositionDataGenerationResponse'
        '400':
          description: Неверный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Ошибка генерации
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /ai/transcribe-answer:
    post:
      operationId: transcribeAnswerWithAI
      tags:
        - AI
      security:
        - AdminAuth: []
      summary: Транскрибировать и отформатировать аудио ответ на интервью
      description: |
        Обрабатывает аудио файл через пайплайн:
        1. Whisper - транскрибация в сырой текст
        2. Claude - форматирование текста (без добавления контента)
        3. Сохранение результата в базу данных
        Сохраняет как сырой, так и отформатированный текст.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - audioFile
                - interviewId
                - questionId
              properties:
                audioFile:
                  type: string
                  format: binary
                  description: Аудио файл для транскрибации
                interviewId:
                  type: integer
                  format: int64
                  description: ID интервью (определяет кандидата и позицию)
                questionId:
                  type: integer
                  format: int64
                  description: ID вопроса для создание ответа
      responses:
        '200':
          description: Аудио успешно обработано
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TranscribeAnswerWithAI200Response'
        '400':
          description: Неверные параметры запроса
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Audio file is empty
        '404':
          description: Интервью или вопрос не найден
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Interview or question not found
        '503':
          description: Сервисы транскрибации недоступны
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Transcription services are not available
components:
  schemas:
    InterviewAnswer:
      type: object
      properties:
        id: { type: integer, format: int64 }
        interviewId: { type: integer, format: int64 }
        questionId: { type: integer, format: int64 }
        answerText: { type: string }
        audioUrl: { type: string }
        videoUrl: { type: string }
        rawTranscription: { type: string, description: Сырой транскрибированный текст }
        formattedTranscription: { type: string, description: Отформатированный текст }
        transcript: { type: string, description: Транскрибированный текст (alias для formattedTranscription) }
        score: { type: number, format: float, description: Оценка ответа от 0 до 100 }
        scoreJustification: { type: string, description: Обоснование оценки }
        feedback: { type: string, description: Обратная связь по ответу }
        durationSeconds: { type: integer, description: Длительность ответа в секундах }
        isCorrect: { type: boolean, description: Правильность ответа для вопросов типа CHOICE }
        voiceSessionId: { type: string, description: ID голосовой сессии }
        voiceConfidence: { type: number, format: float, description: Уверенность в распознавании речи (0.0-1.0) }
        voiceEmotion: { type: string, description: Определённая эмоция в голосе }
        voiceSpeakerId: { type: string, description: ID говорящего }
        voiceAudioUrl: { type: string, description: URL аудио файла ответа }
        voiceProcessingTime: { type: integer, format: int64, description: Время обработки в миллисекундах }
        voiceQualityScore: { type: number, format: float, description: Оценка качества аудио (0.0-1.0) }
        createdAt: { type: string, format: date-time }
      required:
        - id
        - interviewId
        - questionId
    InterviewStatusEnum:
      type: string
      enum:
      - NOT_STARTED
      - IN_PROGRESS
      - FINISHED
    InterviewResultEnum:
      type: string
      enum:
      - SUCCESSFUL
      - UNSUCCESSFUL
      - ERROR
    InterviewStartStatusEnum:
      type: string
      enum:
      - STARTED
      - AGENT_CREATED
      - ERROR
    BaseEntity:
      type: object
      properties:
        id: { type: integer, format: int64 }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
      required:
        - id
        - createdAt
    PaginatedResponse:
      type: object
      description: Базовый класс для всех пагинированных ответов
      properties:
        content:
          type: array
          description: Список элементов на текущей странице
          items: { type: object }
        totalElements: { type: integer, format: int64, description: Общее количество элементов, example: 150 }
        totalPages: { type: integer, format: int64, description: Общее количество страниц, example: 15 }
        number: { type: integer, format: int64, description: Номер текущей страницы (начиная с 0), example: 0 }
        size: { type: integer, format: int64, description: Размер страницы, example: 10 }
      required:
        - content
        - totalElements
        - totalPages
        - number
        - size
    Candidate:
      type: object
      properties:
        id: { type: integer, format: int64 }
        firstName: { type: string }
        lastName: { type: string }
        name: { type: string }
        email: { type: string }
        status: { type: string }
        positionId: { type: integer }
        resumeUrl: { type: string }
        coverLetter: { type: string }
        experienceYears: { type: integer }
        skills: { type: array, items: { type: string } }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
      required:
        - id
        - firstName
        - lastName
        - name
        - email
        - status
        - positionId
        - createdAt
        - updatedAt
    Question:
      type: object
      allOf:
        - $ref: '#/components/schemas/BaseEntity'
        - $ref: '#/components/schemas/BaseQuestionFields'
      properties:
        positionId: { type: integer }
      required:
        - id
        - positionId
        - text
        - type
        - order
        - createdAt
    BaseQuestionFields:
      type: object
      properties:
        text: { type: string }
        type: { $ref: '#/components/schemas/QuestionTypeEnum' }
        order: { type: integer }
        isRequired: { type: boolean }
        maxDuration: { type: integer, description: Максимальная длительность ответа в секундах }
        options:
          type: array
          items: { type: string }
          description: Варианты ответов для вопросов типа CHOICE
        evaluationCriteria: { type: string, description: Критерии оценки ответа }
    QuestionTypeEnum:
      type: string
      enum:
      - TEXT
      - AUDIO
      - VIDEO
      - CHOICE
    # === END COMMON SCHEMAS ===
    Agent:
      type: object
      description: Агент для voice-интервью. Содержит настройки голоса для озвучки вопросов
      properties:
        id:
          type: integer
          format: int64
          description: ID агента в системе
        name:
          type: string
          description: Название агента
        description:
          type: string
          description: Описание агента
        type:
          $ref: '#/components/schemas/AgentTypeEnum'
          description: Тип агента (всегда ELABS_VOICE)
        voiceId:
          type: string
          description: ID голоса в ElevenLabs
        status:
          $ref: '#/components/schemas/AgentStatusEnum'
          description: Статус агента
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - name
        - description
        - type
        - voiceId
        - status
        - createdAt
        - updatedAt
    AgentCreateRequest:
      type: object
      description: Запрос на создание агента. Создаются только агенты типа ELABS_VOICE
      properties:
        name:
          type: string
          description: Название агента
          example: "Интервьюер для Java"
        description:
          type: string
          description: Описание агента
          example: "Агент для проведения технических интервью"
        voiceId:
          type: string
          description: ID голоса в ElevenLabs
          example: "21m00Tcm4TlvDq8ikWAM"
      required:
        - name
        - description
        - voiceId
    AgentUpdateRequest:
      type: object
      description: Запрос на обновление агента. Пока поддерживается только обновление voiceId
      properties:
        voiceId:
          type: string
          description: ID голоса в ElevenLabs
          example: "21m00Tcm4TlvDq8ikWAM"
    AgentConfig:
      type: object
      properties:
        name:
          type: string
          description: Название агента
        description:
          type: string
          description: Описание агента
        prompt:
          type: string
          description: Промпт для агента
        voiceId:
          type: string
          description: ID голоса в ElevenLabs
        voiceSettings:
          type: object
        tools:
          type: array
          items:
            type: string
          description: Список доступных инструментов
        webhookUrl:
          type: string
          description: URL для webhook событий
        language:
          type: string
          description: Язык агента
          example: ru
        personality:
          type: string
          description: Личность агента
          example: professional
      required:
        - name
        - description
        - prompt
        - voiceId
    AgentsPaginatedResponse:
      type: object
      description: Пагинированный список агентов
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Agent'
    # AI schemas
    PositionAiGenerationRequest:
      type: object
      description: Запрос на генерацию вакансии с помощью AI
      properties:
        description:
          type: string
          description: Описание вакансии от пользователя
          example: Нужен Java разработчик для разработки микросервисов
        questionsCount:
          type: integer
          description: Количество вопросов для собеседования
          example: 5
          minimum: 1
          maximum: 20
        questionType:
          type: string
          description: Тип вопросов (hard, soft, mixed)
          example: hard
      required:
        - description
    PositionAiGenerationResponse:
      type: object
      description: Ответ AI с минимальной структурой вакансии
      properties:
        title:
          type: string
          description: Название вакансии
          example: Java Backend Developer
        description:
          type: string
          description: Описание вакансии
          example: Разработка микросервисов на Java с использованием Spring Framework
        topics:
          type: array
          items:
            type: string
          description: Ключевые темы/навыки для собеседования
          example:
            - Java Core
            - Spring Framework
            - Microservices
            - Database Design
        level:
          type: string
          enum:
            - JUNIOR
            - MIDDLE
            - SENIOR
            - LEAD
          description: Уровень позиции
          example: middle
        questions:
          type: array
          items:
            $ref: '#/components/schemas/PositionAiQuestion'
          description: Список вопросов для собеседования
      required:
        - title
        - topics
        - level
        - questions
    PositionAiQuestion:
      type: object
      description: Вопрос для собеседования (AI-генерация)
      properties:
        text:
          type: string
          description: Текст вопроса
          example: Расскажите о принципах SOLID
        type:
          type: string
          enum:
            - TEXT
            - AUDIO
            - CHOICE
          description: Тип вопроса
          example: text
        order:
          type: integer
          description: Порядок вопроса
          example: 1
      required:
        - text
        - type
        - order
    PositionDataGenerationRequest:
      type: object
      properties:
        description:
          type: string
          description: Описание вакансии для генерации данных
          example: Нужен Java разработчик для разработки микросервисов
        existingData:
          type: object
          description: Существующие данные вакансии (опционально)
          properties:
            title:
              type: string
            topics:
              type: array
              items:
                type: string
            level:
              type: string
              enum:
                - JUNIOR
                - MIDDLE
                - SENIOR
                - LEAD
            tags:
              type: array
              items:
                type: string
      required:
        - description
    PositionDataGenerationResponse:
      type: object
      properties:
        generatedData:
          type: object
          properties:
            title:
              type: string
              description: Сгенерированное название вакансии
              example: Java Backend Developer
            topics:
              type: array
              items:
                type: string
              description: Сгенерированные темы для собеседования
              example:
                - Java Core
                - Spring Framework
                - Microservices
                - Database Design
            level:
              type: string
              enum:
                - JUNIOR
                - MIDDLE
                - SENIOR
                - LEAD
              description: Предлагаемый уровень позиции
            tags:
              type: array
              items:
                type: string
              description: Сгенерированные теги
              example:
                - Java
                - Backend
                - Spring
                - Microservices
            suggestedDescription:
              type: string
              description: Улучшенное описание вакансии
        confidence:
          type: number
          format: float
          description: Уверенность в генерации (0-1)
          example: 0.85
        message:
          type: string
          description: Сообщение о результатах генерации
          example: Данные успешно сгенерированы на основе описания
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: Сообщение об ошибке
          example: Произошла ошибка при обработке запроса
        error:
          type: string
          description: Тип ошибки
          example: VALIDATION_ERROR
        timestamp:
          type: string
          format: date-time
          description: Время возникновения ошибки
          example: '2024-01-15T10:30:45Z'
        path:
          type: string
          description: Путь запроса
          example: /api/positions
      required:
        - message
        - error
        - timestamp
    TranscribeAnswerWithAI200Response:
      type: object
      properties:
        success:
          type: boolean
          example: true
        formattedText:
          type: string
          description: Отформатированный текст от Claude
          example: Я работал в компании три года, занимался разработкой на Java.
        interviewAnswerId:
          type: integer
          format: int64
          description: ID ответа на интервью
    AgentStatusEnum:
      type: string
      enum:
        - ACTIVE
        - INACTIVE
        - DELETED
        - ERROR
        - CREATING
      description: Статус агента. ACTIVE - активен, INACTIVE - неактивен, DELETED - удалён, ERROR - ошибка, CREATING - создаётся
    AgentTestRequest:
      type: object
      properties:
        agentId: { type: integer, format: int64 }
        testData: { type: string }
      required:
        - agentId
        - testData
    AgentTestResponse:
      type: object
      properties:
        result: { type: string }
        details: { type: string }
      required:
        - result
    AgentTypeEnum:
      type: string
      description: Тип агента. ELABS_SPEECH - conversational AI, ELABS_VOICE - voice-интервью без AI
      enum: [ ELABS_SPEECH, ELABS_VOICE ]

  securitySchemes:
    CandidateAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    AdminAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT 