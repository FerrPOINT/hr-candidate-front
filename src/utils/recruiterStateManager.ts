import React from 'react';

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —Ä–µ–∫—Ä—É—Ç–µ—Ä—Å–∫–æ–π —á–∞—Å—Ç–∏
// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –≤—ã–±–æ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ localStorage

export interface RecruiterState {
  // VacancyList —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  vacancyList: {
    searchTerm: string;
    statusFilter: string;
    tab: 'all' | 'my';
    selectedId: string | null;
    page: number;
    pageSize: number;
    vacancyTab: string;
  };
  
  // InterviewList —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  interviewList: {
    currentPage: number;
    pageSize: number;
    selectedPosition: number | undefined;
    selectedStatus: string;
    searchQuery: string;
  };
  
  // VacancyCreate —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  vacancyCreate: {
    form: {
      title: string;
      status: string;
      topics: string[];
      language: string;
      showOtherLang: boolean;
      tags: string[];
      minScore: number;
      inviteNext: boolean;
      answerTime: number;
      level: string;
      saveAudio: boolean;
      saveVideo: boolean;
      randomOrder: boolean;
      description: string;
      questionType: string;
      questionsCount: number;
      checkType: string;
    };
    activeTab: 'basic' | 'questions' | 'advanced';
  };
  
  // InterviewCreate —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  interviewCreate: {
    formData: {
      firstName: string;
      lastName: string;
      email: string;
      vacancyId: string;
      scheduledDate: string;
    };
  };
  
  // –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  general: {
    lastVisitedPage: string;
    theme: 'light' | 'dark';
    sidebarCollapsed: boolean;
  };
}

const STORAGE_KEY = 'recruiter_state_v1';

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å localStorage
const saveToStorage = (key: string, data: any) => {
  try {
    localStorage.setItem(key, JSON.stringify(data));
    console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ localStorage: ${key}`, data);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ localStorage: ${key}`, error);
  }
};

const loadFromStorage = (key: string) => {
  try {
    const data = localStorage.getItem(key);
    if (data) {
      const parsed = JSON.parse(data);
      console.log(`üìñ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ localStorage: ${key}`, parsed);
      return parsed;
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ localStorage: ${key}`, error);
  }
  return null;
};

// –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
const defaultState: RecruiterState = {
  vacancyList: {
    searchTerm: '',
    statusFilter: '',
    tab: 'all',
    selectedId: null,
    page: 0,
    pageSize: 20,
    vacancyTab: 'candidates',
  },
  interviewList: {
    currentPage: 0,
    pageSize: 10,
    selectedPosition: undefined,
    selectedStatus: '',
    searchQuery: '',
  },
  vacancyCreate: {
    form: {
      title: '',
      status: 'ACTIVE',
      topics: [],
      language: '–†—É—Å—Å–∫–∏–π',
      showOtherLang: false,
      tags: [],
      minScore: 5,
      inviteNext: false,
      answerTime: 150,
      level: 'MIDDLE',
      saveAudio: false,
      saveVideo: false,
      randomOrder: false,
      description: '',
      questionType: '–í –æ—Å–Ω–æ–≤–Ω–æ–º —Ö–∞—Ä–¥-—Å–∫–∏–ª–ª—ã',
      questionsCount: 5,
      checkType: '',
    },
    activeTab: 'basic',
  },
  interviewCreate: {
    formData: {
      firstName: '',
      lastName: '',
      email: '',
      vacancyId: '',
      scheduledDate: '',
    },
  },
  general: {
    lastVisitedPage: '',
    theme: 'light',
    sidebarCollapsed: false,
  },
};

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
class RecruiterStateManager {
  private state: RecruiterState;
  private listeners: Set<(state: RecruiterState) => void> = new Set();

  constructor() {
    this.state = this.loadState();
    console.log('üîÑ RecruiterStateManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º:', this.state);
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ localStorage
  private loadState(): RecruiterState {
    const saved = loadFromStorage(STORAGE_KEY);
    if (saved) {
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      return this.mergeWithDefaults(saved);
    }
    return { ...defaultState };
  }

  // –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
  private mergeWithDefaults(saved: any): RecruiterState {
    const merged = { ...defaultState };
    
    // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤
    const mergeDeep = (target: any, source: any) => {
      for (const key in source) {
        if (source[key] && typeof source[key] === 'object' && !Array.isArray(source[key])) {
          if (!target[key]) target[key] = {};
          mergeDeep(target[key], source[key]);
        } else {
          target[key] = source[key];
        }
      }
    };
    
    mergeDeep(merged, saved);
    return merged;
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ localStorage
  private saveState() {
    saveToStorage(STORAGE_KEY, this.state);
    this.notifyListeners();
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–ª—É—à–∞—Ç–µ–ª–µ–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
  private notifyListeners() {
    this.listeners.forEach(listener => {
      try {
        listener(this.state);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Å–ª—É—à–∞—Ç–µ–ª–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error);
      }
    });
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
  subscribe(listener: (state: RecruiterState) => void) {
    this.listeners.add(listener);
    return () => {
      this.listeners.delete(listener);
    };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  getState(): RecruiterState {
    return { ...this.state };
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  updateState(updates: Partial<RecruiterState>) {
    this.state = { ...this.state, ...updates };
    this.saveState();
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å VacancyList
  updateVacancyList(updates: Partial<RecruiterState['vacancyList']>) {
    this.state.vacancyList = { ...this.state.vacancyList, ...updates };
    this.saveState();
  }

  getVacancyListState() {
    return { ...this.state.vacancyList };
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å InterviewList
  updateInterviewList(updates: Partial<RecruiterState['interviewList']>) {
    this.state.interviewList = { ...this.state.interviewList, ...updates };
    this.saveState();
  }

  getInterviewListState() {
    return { ...this.state.interviewList };
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å VacancyCreate
  updateVacancyCreate(updates: Partial<RecruiterState['vacancyCreate']>) {
    this.state.vacancyCreate = { ...this.state.vacancyCreate, ...updates };
    this.saveState();
  }

  getVacancyCreateState() {
    return { ...this.state.vacancyCreate };
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å InterviewCreate
  updateInterviewCreate(updates: Partial<RecruiterState['interviewCreate']>) {
    this.state.interviewCreate = { ...this.state.interviewCreate, ...updates };
    this.saveState();
  }

  getInterviewCreateState() {
    return { ...this.state.interviewCreate };
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–±—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
  updateGeneral(updates: Partial<RecruiterState['general']>) {
    this.state.general = { ...this.state.general, ...updates };
    this.saveState();
  }

  getGeneralState() {
    return { ...this.state.general };
  }

  // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
  resetState() {
    this.state = { ...defaultState };
    this.saveState();
    console.log('üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–æ –∫ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º');
  }

  // –°–±—Ä–æ—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ–∫—Ü–∏–∏
  resetSection(section: keyof RecruiterState) {
    if (section in defaultState) {
      (this.state as any)[section] = { ...(defaultState as any)[section] };
      this.saveState();
      console.log(`üîÑ –°–µ–∫—Ü–∏—è ${section} —Å–±—Ä–æ—à–µ–Ω–∞ –∫ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º`);
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ localStorage
  clearStorage() {
    try {
      localStorage.removeItem(STORAGE_KEY);
      console.log('üóëÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞ —É–¥–∞–ª–µ–Ω–æ –∏–∑ localStorage');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ localStorage:', error);
    }
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const recruiterStateManager = new RecruiterStateManager();

// React —Ö—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
export const useRecruiterState = () => {
  const [state, setState] = React.useState<RecruiterState>(recruiterStateManager.getState());

  React.useEffect(() => {
    const unsubscribe = recruiterStateManager.subscribe(setState);
    return unsubscribe;
  }, []);

  return {
    state,
    updateState: recruiterStateManager.updateState.bind(recruiterStateManager),
    updateVacancyList: recruiterStateManager.updateVacancyList.bind(recruiterStateManager),
    updateInterviewList: recruiterStateManager.updateInterviewList.bind(recruiterStateManager),
    updateVacancyCreate: recruiterStateManager.updateVacancyCreate.bind(recruiterStateManager),
    updateInterviewCreate: recruiterStateManager.updateInterviewCreate.bind(recruiterStateManager),
    updateGeneral: recruiterStateManager.updateGeneral.bind(recruiterStateManager),
    resetState: recruiterStateManager.resetState.bind(recruiterStateManager),
    resetSection: recruiterStateManager.resetSection.bind(recruiterStateManager),
  };
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
export default recruiterStateManager; 