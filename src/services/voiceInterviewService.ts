/**
 * Voice Interview Service
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤—å—é —á–µ—Ä–µ–∑ backend API
 *
 * Sequence diagram (Mermaid):
 *
 * ```mermaid
 * sequenceDiagram
 *   participant UI as Frontend UI
 *   participant Service as VoiceInterviewService
 *   participant API as Backend API
 *   participant ElevenLabs as ElevenLabs API
 *
 *   UI->>Service: startInterview(interviewId, options)
 *   Service->>API: POST /interviews/{id}/start (InterviewStartRequest)
 *   API->>ElevenLabs: Create agent, voice session
 *   ElevenLabs-->>API: Session info
 *   API-->>Service: InterviewStartResponse
 *   Service-->>UI: InterviewStartResponse
 *
 *   Note over UI,Service: UI –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é
 * ```
 *
 * –ö–ª—é—á–µ–≤—ã–µ —ç—Ç–∞–ø—ã:
 * - UI –≤—ã–∑—ã–≤–∞–µ—Ç startInterview —Å –Ω—É–∂–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
 * - Service —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç InterviewStartRequest –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ backend
 * - Backend —Å–æ–∑–¥–∞—ë—Ç –∞–≥–µ–Ω—Ç–∞ –∏ —Å–µ—Å—Å–∏—é –≤ ElevenLabs
 * - Backend –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç InterviewStartResponse —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è UI
 */

import { apiClient } from '../api/apiClient';
import type { InterviewStartRequest, InterviewStartResponse } from '../api/models';
import type { AgentConfig } from '../api/models';
// import type { VoiceSettings } from '../client/models/voice-settings'; // Module not found, using any

/**
 * –û–ø—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞ –∏–Ω—Ç–µ—Ä–≤—å—é
 * - voiceMode: –≤–∫–ª—é—á–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–π —Ä–µ–∂–∏–º
 * - autoCreateAgent: —Å–æ–∑–¥–∞—Ç—å –∞–≥–µ–Ω—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
 * - includeCandidateData: –≤–∫–ª—é—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
 * - agentConfig: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–≥–µ–Ω—Ç–∞ (—Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–æ)
 * - voiceSettings: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–æ–ª–æ—Å–∞ (—Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–æ)
 */
interface StartInterviewOptions {
  voiceMode?: boolean;
  autoCreateAgent?: boolean;
  includeCandidateData?: boolean;
  agentConfig?: AgentConfig;
  voiceSettings?: any; // VoiceSettings type not available
}

export class VoiceInterviewService {
  /**
   * –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–≤—å—é —Å –≥–æ–ª–æ—Å–æ–≤—ã–º —Ä–µ–∂–∏–º–æ–º
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é
   *
   * @param interviewId ID –∏–Ω—Ç–µ—Ä–≤—å—é
   * @param options –û–ø—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞ (—Å–º. StartInterviewOptions)
   * @returns InterviewStartResponse —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è UI
   */
  static async startInterview(interviewId: number, options: StartInterviewOptions = {}): Promise<InterviewStartResponse> {
    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–º–µ—Å—Ç–æ –∫–æ–Ω—Ñ–∏–≥–∞
    const elevenLabsEnabled = false; // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ
    
    if (!elevenLabsEnabled) {
      return {
        signedUrl: '',
        sessionId: '',
        agentId: '',
        webhookUrl: '',
        status: undefined,
        message: 'ElevenLabs disabled',
        candidateData: {},
      } as unknown as InterviewStartResponse;
    }
    const request: InterviewStartRequest = {
      autoCreateAgent: options.autoCreateAgent ?? false, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ —Å–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
      includeCandidateData: options.includeCandidateData ?? true,
      agentConfig: options.agentConfig,
      voiceSettings: options.voiceSettings
    };

    try {
      console.log('üöÄ Starting interview with options:', request);
      const response = await apiClient.interviews.startInterview(interviewId, request);

      console.log('‚úÖ Interview started successfully:', response.data);
      return response.data;
    } catch (error: any) {
      console.error('‚ùå Error starting interview:', error);
      throw new Error(error?.response?.data?.message || error?.message || 'Failed to start interview');
    }
  }

  /**
   * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤—å—é
   * @param interviewId ID –∏–Ω—Ç–µ—Ä–≤—å—é
   * @returns –û—Ç–≤–µ—Ç backend (—Ç–∏–ø –∑–∞–≤–∏—Å–∏—Ç –æ—Ç API)
   */
  static async finishInterview(interviewId: number): Promise<any> {
    const elevenLabsEnabled = false; // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ
    if (!elevenLabsEnabled) return;
    try {
      const response = await apiClient.interviews.finishInterview(interviewId);
      console.log('‚úÖ Interview finished successfully');
      return response.data;
    } catch (error: any) {
      console.error('‚ùå Error finishing interview:', error);
      throw new Error(error?.response?.data?.message || error?.message || 'Failed to finish interview');
    }
  }
} 