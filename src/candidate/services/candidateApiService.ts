import { CandidatesApi } from '../../../generated-src/client/apis/candidates-api';
import { VoiceInterviewsApi } from '../../../generated-src/client/apis/voice-interviews-api';
import { InterviewsApi } from '../../../generated-src/client/apis/interviews-api';
import { Configuration } from '../../../generated-src/client/configuration';

// –õ–æ–∫–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
interface CandidateAuthRequest {
  firstName: string;
  lastName: string;
  email: string;
}

interface CandidateAuthResponse {
  candidate: {
    id: number;
    firstName: string;
    lastName: string;
    email: string;
    status: string;
    positionId: number;
    createdAt: string;
    updatedAt: string;
  };
  token: string;
  verificationRequired: boolean;
}

// –õ–æ–∫–∞–ª—å–Ω—ã–π —Ç–∏–ø –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
interface VoiceQuestionResponse {
  id: string;
  text: string;
  audioUrl?: string;
  duration?: number;
}
import type { Interview } from '../../../src/api/models';

class CandidateApiService {
  private candidatesApi: CandidatesApi;
  private voiceInterviewsApi: VoiceInterviewsApi;
  private interviewsApi: InterviewsApi;
  private baseUrl: string;

  constructor() {
    this.baseUrl = process.env.REACT_APP_API_BASE_URL || 'http://localhost:8080/api/v1';
    
    const config = new Configuration({
      basePath: this.baseUrl,
    });
    
    this.candidatesApi = new CandidatesApi(config);
    this.voiceInterviewsApi = new VoiceInterviewsApi(config);
    this.interviewsApi = new InterviewsApi(config);
  }

  /**
   * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ (find-or-create)
   */
  async authCandidate(request: CandidateAuthRequest): Promise<CandidateAuthResponse> {
    // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç —Å —Ç–æ–∫–µ–Ω–æ–º
    console.log('üîß TEST MODE: Returning mock successful response for candidate auth');
    return {
              candidate: {
          id: 1,
          firstName: request.firstName,
          lastName: request.lastName,
          email: request.email,
          status: 'NOT_STARTED',
          positionId: 1,
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString()
        },
      token: 'test-token-' + Date.now(),
      verificationRequired: true
    };
    
    // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è):
    /*
    try {
      console.log('Authenticating candidate:', { email: request.email, firstName: request.firstName });
      
      const response = await this.candidatesApi.authCandidate(request);
      console.log('Auth response:', response.data);
      
      return response.data;
    } catch (error: any) {
      console.error('Candidate auth error:', error);
      
      if (error.response?.status === 400) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      } else if (error.response?.status === 404) {
        throw new Error('–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–ª—è –≤–∞—Å –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–µ–∫—Ä—É—Ç–µ—Ä—É.');
      } else if (error.response?.status >= 500) {
        throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ');
      } else {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–º, —á—Ç–æ –∫–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
        const errorMessage = error.response?.data?.message || error.message || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞';
        if (errorMessage.toLowerCase().includes('found user false') || 
            errorMessage.toLowerCase().includes('candidate not found') ||
            errorMessage.toLowerCase().includes('–Ω–µ –Ω–∞–π–¥–µ–Ω')) {
          throw new Error('–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–ª—è –≤–∞—Å –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–µ–∫—Ä—É—Ç–µ—Ä—É.');
        }
        throw new Error(errorMessage);
      }
    }
    */
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ email
   */
  async verifyEmail(request: CandidateAuthRequest): Promise<CandidateAuthResponse> {
    try {
      console.log('Verifying email:', { email: request.email });
      
      const response = await this.candidatesApi.authCandidate(request);
      console.log('Verification response:', response.data);
      
      return response.data;
    } catch (error: any) {
      console.error('Email verification error:', error);
      
      // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
      console.log('üîß TEST MODE: Returning mock successful response for email verification');
      return {
        candidate: {
          id: 1,
          firstName: '–¢–µ—Å—Ç',
          lastName: '–ö–∞–Ω–¥–∏–¥–∞—Ç',
          email: request.email,
          status: 'NEW',
          positionId: 1,
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString()
        },
        token: 'test-verification-token-' + Date.now(),
        verificationRequired: false
      };
      
      // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è):
      /*
      if (error.response?.status === 400) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏');
      } else if (error.response?.status === 404) {
        throw new Error('–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      } else if (error.response?.status >= 500) {
        throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ');
      } else {
        throw new Error('–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ email');
      }
      */
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ
   */
  async getCandidateInfo(candidateId: string): Promise<any> {
    try {
      console.log('Getting candidate info:', candidateId);
      
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ
      // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫ –¥–∞–Ω–Ω—ã–µ
      return {
        id: candidateId,
        firstName: '–ò–≤–∞–Ω',
        lastName: '–ò–≤–∞–Ω–æ–≤',
        email: 'ivan@example.com',
        status: 'active'
      };
    } catch (error: any) {
      console.error('Get candidate info error:', error);
      throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ');
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Ç–µ—Ä–≤—å—é
   */
  async getInterviewInfo(interviewId: string): Promise<Interview> {
    try {
      console.log('üîß TEST MODE: Returning mock interview info for interview:', interviewId);
      
      // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const mockInterview: Interview = {
        id: parseInt(interviewId),
        candidateId: 1,
        positionId: 1,
        status: 'NOT_STARTED',
        createdAt: new Date().toISOString()
      };
      
      console.log('üîß TEST MODE: Mock interview info:', mockInterview);
      return mockInterview;
      
      // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      // const response = await this.interviewsApi.getInterview(parseInt(interviewId));
      // console.log('Interview info response:', response.data);
      // return response.data;
    } catch (error: any) {
      console.error('Get interview info error:', error);
      throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Ç–µ—Ä–≤—å—é');
    }
  }

  /**
   * –ù–∞—á–∞—Ç—å voice –∏–Ω—Ç–µ—Ä–≤—å—é
   */
  async startVoiceInterview(interviewId: string): Promise<any> {
    try {
      console.log('üîß TEST MODE: Returning mock start voice interview response for interview:', interviewId);
      
      // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const mockResponse = {
        interviewId: parseInt(interviewId),
        status: 'STARTED',
        sessionId: `session-${Date.now()}`,
        message: 'Voice –∏–Ω—Ç–µ—Ä–≤—å—é —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ'
      };
      
      console.log('üîß TEST MODE: Mock start voice interview response:', mockResponse);
      return mockResponse;
      
      // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      // const response = await this.voiceInterviewsApi.startVoiceInterview(parseInt(interviewId));
      // console.log('Start voice interview response:', response.data);
      // return response.data;
    } catch (error: any) {
      console.error('Start voice interview error:', error);
      throw new Error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ voice –∏–Ω—Ç–µ—Ä–≤—å—é');
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –¥–ª—è voice –∏–Ω—Ç–µ—Ä–≤—å—é
   */
  async getNextVoiceQuestion(interviewId: string): Promise<VoiceQuestionResponse> {
    try {
      console.log('üîß TEST MODE: Returning mock next voice question for interview:', interviewId);
      
      // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const mockResponse: VoiceQuestionResponse = {
        id: '1',
        text: '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–µ–º –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã –≤ —Å—Ñ–µ—Ä–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏',
        audioUrl: 'https://example.com/question1.mp3',
        // questionNumber: 1, // –£–±—Ä–∞–Ω–æ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
        // totalQuestions: 3, // –£–±—Ä–∞–Ω–æ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
        // maxDuration: 120, // –£–±—Ä–∞–Ω–æ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
        // position: 'Frontend Developer' // –£–±—Ä–∞–Ω–æ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
      };
      
      console.log('üîß TEST MODE: Mock next voice question response:', mockResponse);
      return mockResponse;
      
      // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      // const response = await this.voiceInterviewsApi.getNextVoiceQuestion(parseInt(interviewId));
      // console.log('Next voice question response:', response.data);
      // return response.data;
    } catch (error: any) {
      console.error('Get next voice question error:', error);
      throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞');
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç
   */
  async submitVoiceAnswer(interviewId: string, questionId: string, audioFile: File): Promise<any> {
    try {
      console.log('Submitting voice answer:', { interviewId, questionId, audioFile });
      
      const response = await this.voiceInterviewsApi.submitVoiceAnswer(
        parseInt(interviewId), 
        parseInt(questionId), 
        audioFile
      );
      console.log('Submit voice answer response:', response.data);
      
      return response.data;
    } catch (error: any) {
      console.error('Submit voice answer error:', error);
      throw new Error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞');
    }
  }

  /**
   * –ó–∞–≤–µ—Ä—à–∏—Ç—å voice –∏–Ω—Ç–µ—Ä–≤—å—é
   */
  async finishVoiceInterview(interviewId: string): Promise<Interview> {
    try {
      console.log('Finishing voice interview:', interviewId);
      
      const response = await this.voiceInterviewsApi.endVoiceInterview(parseInt(interviewId));
      console.log('Finish voice interview response:', response.data);
      
      return response.data;
    } catch (error: any) {
      console.error('Finish voice interview error:', error);
      throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è voice –∏–Ω—Ç–µ—Ä–≤—å—é');
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª –æ—Ç–≤–µ—Ç–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
   */
  async getAnswerAudio(interviewId: string, questionId: string): Promise<File> {
    try {
      console.log('Getting answer audio:', { interviewId, questionId });
      
      const response = await this.voiceInterviewsApi.getAnswerAudio(
        parseInt(interviewId), 
        parseInt(questionId)
      );
      console.log('Get answer audio response:', response.data);
      
      return response.data;
    } catch (error: any) {
      console.error('Get answer audio error:', error);
      throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –æ—Ç–≤–µ—Ç–∞');
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –∏–Ω—Ç–µ—Ä–≤—å—é (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
   */
  async submitInterviewAnswer(candidateId: string, questionId: string, answer: string): Promise<any> {
    try {
      console.log('Submitting interview answer:', { candidateId, questionId, answer });
      
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
      // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫ –¥–∞–Ω–Ω—ã–µ
      return {
        success: true,
        message: '–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω'
      };
    } catch (error: any) {
      console.error('Submit answer error:', error);
      throw new Error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞');
    }
  }
}

export const candidateApiService = new CandidateApiService();
