import { apiService } from '../../services/apiService';
import { extractApiErrorMessage } from '../../utils/error';
import type { CandidateLoginRequest } from 'generated-src/client/models/candidate-login-request';
import type { CandidateLoginResponse } from 'generated-src/client/models/candidate-login-response';
import type { CandidateEmailVerificationRequest } from 'generated-src/client/models/candidate-email-verification-request';
import type { CandidateEmailVerificationResponse } from 'generated-src/client/models/candidate-email-verification-response';
import { Configuration } from '../../../generated-src/client/configuration';
import { CandidatesApi } from '../../../generated-src/client/apis/candidates-api';

// –õ–æ–∫–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –Ω–æ–≤—ã–º API)
// interface CandidateAuthRequest {
//   firstName: string;
//   lastName: string;
//   email: string;
//   positionId: number; // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ —Å–æ–≥–ª–∞—Å–Ω–æ API —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
//   verificationCode?: string; // –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
// }

// interface CandidateAuthResponse {
//   candidate: {
//     id: number;
//     firstName: string;
//     lastName: string;
//     email: string;
//     phone?: string;
//     status: string;
//     createdAt: string;
//     updatedAt: string;
//   };
//   token?: string; // –¢–æ–∫–µ–Ω –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –¥–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
//   verificationRequired: boolean; // –§–ª–∞–≥ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
// }

// –õ–æ–∫–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é
interface Interview {
  id: number;
  candidateId: number;
  positionId: number;
  status: InterviewStatusEnum;
  createdAt: string;
  startedAt?: string;
  finishedAt?: string;
}

enum InterviewStatusEnum {
  NOT_STARTED = 'NOT_STARTED',
  IN_PROGRESS = 'IN_PROGRESS',
  FINISHED = 'FINISHED'
}

// –õ–æ–∫–∞–ª—å–Ω—ã–π —Ç–∏–ø –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
interface VoiceQuestionResponse {
  id: string;
  text: string;
  audioUrl?: string;
  duration?: number;
}

class CandidateApiService {
  /**
   * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ (find-or-create) - –ø—É–±–ª–∏—á–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
   */
  async loginCandidate(request: CandidateLoginRequest): Promise<CandidateLoginResponse> {
    try {
      console.log('üöÄ candidateApiService.loginCandidate –≤—ã–∑–≤–∞–Ω');
      console.log('üìù –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', { email: request.email, firstName: request.firstName, positionId: request.positionId });
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
      console.log('üîó –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π API –∫–ª–∏–µ–Ω—Ç...');
      const publicClient = apiService.getPublicApiClient();
      console.log('‚úÖ –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω:', publicClient);
      
      console.log('üì§ –í—ã–∑—ã–≤–∞–µ–º API candidates.loginCandidate...');
      const response = await publicClient.candidates.loginCandidate(request);
      
      console.log('üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API:', response);
      console.log('üìä –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', response.data);
      return response.data;
    } catch (error: any) {
      console.error('üí• –û—à–∏–±–∫–∞ –≤ candidateApiService.loginCandidate:', error);
      console.error('üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
        message: error.message,
        status: error.response?.status,
        statusText: error.response?.statusText,
        data: error.response?.data,
        config: error.config
      });
      
      throw new Error(extractApiErrorMessage(error));
    }
  }

  /**
   * –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è email –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ - –ø—É–±–ª–∏—á–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
   */
  async verifyCandidateEmail(request: CandidateEmailVerificationRequest): Promise<CandidateEmailVerificationResponse> {
    try {
      console.log('Verifying candidate email:', { email: request.email });
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
      const response = await apiService.getPublicApiClient().candidates.verifyCandidateEmail(request);
      
      console.log('Verification response:', response.data);
      return response.data;
    } catch (error: any) {
      console.error('Error verifying candidate email:', error);
      throw new Error(extractApiErrorMessage(error));
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –ø–æ email - –ø—É–±–ª–∏—á–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
   */
  async checkInterviewExists(email: string): Promise<{ exists: boolean; interviewId?: number }> {
    try {
      console.log('Checking interview existence for email:', email);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
      const response = await apiService.getPublicApiClient().candidates.loginCandidate({ 
        firstName: '', 
        lastName: '', 
        email,
        positionId: 1 // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
      });
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–≤–µ—Ç –∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è, –∑–Ω–∞—á–∏—Ç —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      const exists = response.data && !response.data.verificationRequired;
      const interviewId = response.data?.interview?.id;
      
      console.log('Interview check result:', { exists, interviewId });
      return { exists, interviewId };
    } catch (error: any) {
      console.error('Error checking interview existence:', error);
      return { exists: false };
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ API –∫–ª–∏–µ–Ω—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º
   */
  private createApiClient(token: string) {
    const config = new Configuration({
      basePath: (process.env.REACT_APP_API_BASE_URL || '/api/v1').toString().trim().replace(/\/+$/, ''),
      accessToken: () => token
    });

    return {
      candidates: new CandidatesApi(config)
    };
  }

  /**
   * –°—Ç–∞—Ä—Ç —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è - –∑–∞—â–∏—â–µ–Ω–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç (—Ç—Ä–µ–±—É–µ—Ç —Ç–æ–∫–µ–Ω)
   */
  async startInterview(interviewId: number, token: string): Promise<{ success: boolean; interview?: Interview }> {
    try {
      console.log('Starting interview:', { interviewId, token: token.substring(0, 10) + '...' });
      
      // –°–æ–∑–¥–∞–µ–º API –∫–ª–∏–µ–Ω—Ç —Å —Ç–æ–∫–µ–Ω–æ–º
      const apiClient = this.createApiClient(token);
      const response = await apiClient.candidates.startInterview(interviewId);
      
      console.log('Start interview response:', response.data);
      
      // –ú–∞–ø–ø–∏–º –æ—Ç–≤–µ—Ç API –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ç–∏–ø
      const interview: Interview = {
        id: (response.data as any).interviewId || interviewId,
        candidateId: 0, // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –∏–∑ candidateData –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
        positionId: 0, // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –∏–∑ candidateData –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
        status: this.mapInterviewStatus((response.data as any).status),
        createdAt: new Date().toISOString(),
        startedAt: new Date().toISOString(),
        finishedAt: undefined
      };
      
      return { success: true, interview };
    } catch (error: any) {
      console.error('Error starting interview:', error);
      throw new Error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è');
    }
  }

  /**
   * –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω—Ç–µ—Ä–≤—å—é –∏–∑ API –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π enum
   */
  private mapInterviewStatus(status?: string): InterviewStatusEnum {
    switch (status) {
      case 'NOT_STARTED':
        return InterviewStatusEnum.NOT_STARTED;
      case 'IN_PROGRESS':
        return InterviewStatusEnum.IN_PROGRESS;
      case 'FINISHED':
        return InterviewStatusEnum.FINISHED;
      default:
        return InterviewStatusEnum.NOT_STARTED;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞–∫–∞–Ω—Å–∏–∏ - –ø—É–±–ª–∏—á–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
   */
  async getPositionSummary(positionId: number): Promise<{ 
    id: number; 
    title: string; 
    department: string;
    company: string;
    type: string;
    questionsCount: number 
  }> {
    try {
      console.log('üîç Getting position summary for positionId:', positionId);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
      const response = await apiService.getPublicApiClient().candidates.getCandidatePositionSummary(positionId);
      console.log('üì• API response for position summary:', response.data);
      
      const raw: any = response.data ?? {};
      const mappedQuestionsCount = (
        raw.questionsCount ??
        raw.totalQuestions ??
        raw.questions_total ??
        raw.questions_count ??
        (Array.isArray(raw.questions) ? raw.questions.length : undefined)
      );
      
      if (typeof mappedQuestionsCount !== 'number' || Number.isNaN(mappedQuestionsCount)) {
        throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ API');
      }
        
      // API –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å –ø–æ–ª–µ–π ‚Äî –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–ø–æ–ª–Ω—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞–º–∏ –±—Ä–µ–Ω–¥–∏–Ω–≥–∞
      const result = {
        id: raw.id,
        title: raw.title,
        department: 'Engineering',
        company: 'WMT group',
        type: 'Full-time',
        questionsCount: mappedQuestionsCount
      };
      
      console.log('‚úÖ Final position summary:', result);
      return result;
    } catch (error: any) {
      console.error('‚ùå Error getting position summary:', error);
      // –ë–æ–ª—å—à–µ –Ω–µ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è ‚Äî –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã UI –ø–æ–∫–∞–∑–∞–ª –µ—ë —è–≤–Ω–æ
      throw new Error(error?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–∫–∞–Ω—Å–∏–∏');
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ
   */
  async getCandidateInfo(candidateId: string, token: string): Promise<any> {
    throw new Error('–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ Candidates API');
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Ç–µ—Ä–≤—å—é
   */
  async getInterviewInfo(interviewId: string, token: string): Promise<any> {
    try {
      console.log('Getting interview info for interview:', interviewId);
      
      // –í Candidates API –Ω–µ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Ç–µ—Ä–≤—å—é
      throw new Error('–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ Candidates API');
    } catch (error: any) {
      console.error('Get interview info error:', error);
      throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Ç–µ—Ä–≤—å—é');
    }
  }

  /**
   * –°—Ç–∞—Ä—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é
   */
  async startVoiceInterview(interviewId: string, token: string): Promise<any> {
    const apiClient = this.createApiClient(token);
    return (await apiClient.candidates.startInterview(parseInt(interviewId))).data;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
   */
  async getNextVoiceQuestion(interviewId: string, token: string): Promise<VoiceQuestionResponse> {
    const apiClient = this.createApiClient(token);
    const resp = await apiClient.candidates.getCurrentQuestion(parseInt(interviewId));
    const d: any = resp.data;
    return {
      id: String(d.questionId ?? d.id ?? ''),
      text: d.text || '',
      audioUrl: d.audioUrl,
      duration: d.maxDuration
    };
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
   */
  async submitVoiceAnswer(interviewId: string, questionId: string, audioFile: File, token: string): Promise<any> {
    const apiClient = this.createApiClient(token);
    const resp = await apiClient.candidates.submitAnswer(parseInt(interviewId), parseInt(questionId), false, audioFile);
    return resp.data;
  }

  /**
   * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é
   */
  async finishVoiceInterview(interviewId: string, token: string): Promise<any> {
    const apiClient = this.createApiClient(token);
    const resp = await apiClient.candidates.endInterview(parseInt(interviewId));
    return resp.data;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –æ—Ç–≤–µ—Ç–∞
   */
  async getAnswerAudio(): Promise<any> { throw new Error('–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ'); }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –∏–Ω—Ç–µ—Ä–≤—å—é - –∑–∞—â–∏—â–µ–Ω–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
   */
  async submitInterviewAnswer(candidateId: string, questionId: string, answer: string, token: string): Promise<any> {
    try {
      console.log('Submitting interview answer:', { candidateId, questionId, answer });
      
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
      // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫ –¥–∞–Ω–Ω—ã–µ
      return {
        success: true,
        message: '–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω'
      };
    } catch (error: any) {
      console.error('Submit answer error:', error);
      throw new Error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞');
    }
  }
}

export const candidateApiService = new CandidateApiService();
