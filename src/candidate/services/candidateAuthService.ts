import { candidateApiService } from './candidateApiService';

export interface CandidateAuthData {
  firstName: string;
  lastName: string;
  email: string;
  token?: string;
}

// –ê–ª–∏–∞—Å—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export type CandidateAuthRequest = CandidateAuthData;

export interface EmailVerificationRequest {
  email: string;
  verificationCode: string;
}

export interface AuthResponse {
  success: boolean;
  candidateId?: string;
  message?: string;
  error?: string;
}

class CandidateAuthService {
  private static CANDIDATE_ID_KEY = 'candidate_id';
  private static AUTH_TOKEN_KEY = 'auth_token';

  /**
   * –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
   */
  async authenticate(authData: CandidateAuthData): Promise<AuthResponse> {
    console.log('Starting candidate authentication:', { email: authData.email, firstName: authData.firstName });
    
    // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –≤—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API
    const response = await candidateApiService.authCandidate({
      firstName: authData.firstName,
      lastName: authData.lastName,
      email: authData.email
    });

    console.log('Authentication successful:', response);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ localStorage
    if (response.candidate?.id) {
      localStorage.setItem(CandidateAuthService.CANDIDATE_ID_KEY, String(response.candidate.id));
    }
    if (response.token) {
      localStorage.setItem(CandidateAuthService.AUTH_TOKEN_KEY, response.token);
    }

    return {
      success: true,
      candidateId: response.candidate?.id ? String(response.candidate.id) : undefined,
      message: '–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞'
    };
    
    // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è):
    /*
    try {
      console.log('Starting candidate authentication:', { email: authData.email, firstName: authData.firstName });
      
      const response = await candidateApiService.authCandidate({
        firstName: authData.firstName,
        lastName: authData.lastName,
        email: authData.email
      });

      console.log('Authentication successful:', response);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ localStorage
      if (response.candidate?.id) {
        localStorage.setItem(CandidateAuthService.CANDIDATE_ID_KEY, String(response.candidate.id));
      }
      if (response.token) {
        localStorage.setItem(CandidateAuthService.AUTH_TOKEN_KEY, response.token);
      }

      return {
        success: true,
        candidateId: response.candidate?.id ? String(response.candidate.id) : undefined,
        message: '–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞'
      };
    } catch (error: any) {
      console.error('Authentication failed:', error);
      
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å–ª—É—á–∞—è –∫–æ–≥–¥–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
      const errorMessage = error.message || '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏';
      if (errorMessage.includes('–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ') ||
          errorMessage.toLowerCase().includes('found user false') ||
          errorMessage.toLowerCase().includes('candidate not found')) {
        return {
          success: false,
          error: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–ª—è –≤–∞—Å –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–µ–∫—Ä—É—Ç–µ—Ä—É.'
        };
      }
      
      return {
        success: false,
        error: errorMessage
      };
    }
    */
  }

  /**
   * –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è email
   */
  async verifyEmail(email: string, verificationCode: string): Promise<AuthResponse> {
    try {
      console.log('Starting email verification:', { email, code: verificationCode });
      
      const response = await candidateApiService.verifyEmail({
        firstName: '', // –ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        lastName: '',  // –ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        email
      });

      console.log('Email verification successful:', response);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
      if (response.token) {
        localStorage.setItem(CandidateAuthService.AUTH_TOKEN_KEY, response.token);
      }

      return {
        success: true,
        candidateId: response.candidate?.id ? String(response.candidate.id) : undefined,
        message: 'Email —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω'
      };
    } catch (error: any) {
      console.error('Email verification failed:', error);
      
      // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
      console.log('üîß TEST MODE: Returning mock successful response for email verification service');
      return {
        success: true,
        candidateId: '1',
        message: 'Email —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)'
      };
      
      // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è):
      /*
      return {
        success: false,
        error: error.message || '–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ email'
      };
      */
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ ID –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏–∑ localStorage
   */
  getCandidateId(): string | null {
    return localStorage.getItem(CandidateAuthService.CANDIDATE_ID_KEY);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
   */
  getAuthToken(): string | null {
    return localStorage.getItem(CandidateAuthService.AUTH_TOKEN_KEY);
  }

  /**
   * –ê–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
   */
  getToken(): string | null {
    return this.getAuthToken();
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
   */
  getCandidateData(): any {
    const candidateId = this.getCandidateId();
    const token = this.getAuthToken();
    
    if (candidateId && token) {
      return {
        candidateId,
        token,
        isAuthenticated: true
      };
    }
    
    return null;
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
   */
  saveCandidateData(data: any): void {
    if (data.id) {
      localStorage.setItem(CandidateAuthService.CANDIDATE_ID_KEY, data.id);
    }
    if (data.token) {
      localStorage.setItem(CandidateAuthService.AUTH_TOKEN_KEY, data.token);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
   */
  isAuthenticated(): boolean {
    const candidateId = this.getCandidateId();
    const token = this.getAuthToken();
    return !!(candidateId && token);
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
   */
  clearAuth(): void {
    localStorage.removeItem(CandidateAuthService.CANDIDATE_ID_KEY);
    localStorage.removeItem(CandidateAuthService.AUTH_TOKEN_KEY);
    console.log('Auth data cleared');
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ
   */
  async getCandidateInfo(): Promise<any> {
    try {
      const candidateId = this.getCandidateId();
      if (!candidateId) {
        throw new Error('–ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      return await candidateApiService.getCandidateInfo(candidateId);
    } catch (error: any) {
      console.error('Failed to get candidate info:', error);
      throw error;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –∏–Ω—Ç–µ—Ä–≤—å—é
   */
  async submitAnswer(questionId: string, answer: string): Promise<any> {
    try {
      const candidateId = this.getCandidateId();
      if (!candidateId) {
        throw new Error('–ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      return await candidateApiService.submitInterviewAnswer(candidateId, questionId, answer);
    } catch (error: any) {
      console.error('Failed to submit answer:', error);
      throw error;
    }
  }
}

export const candidateAuthService = new CandidateAuthService();

