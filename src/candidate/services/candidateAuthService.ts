import { candidateApiService } from './candidateApiService';
import type { CandidateLoginRequest, CandidateLoginResponse, CandidateEmailVerificationRequest, CandidateEmailVerificationResponse } from '../../api/models';

export interface CandidateAuthData {
  firstName: string;
  lastName: string;
  email: string;
  positionId: number; // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ —Å–æ–≥–ª–∞—Å–Ω–æ API —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
  token?: string;
}

// –ê–ª–∏–∞—Å—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export type CandidateAuthRequest = CandidateAuthData;

export interface EmailVerificationRequest {
  email: string;
  verificationCode: string;
}

export interface AuthResponse {
  success: boolean;
  candidateId?: string;
  message?: string;
  error?: string;
  interviewId?: number;
  token?: string;
}

class CandidateAuthService {
  private static CANDIDATE_ID_KEY = 'candidate_id';
  private static AUTH_TOKEN_KEY = 'auth_token';

  /**
   * –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
   */
  async authenticate(authData: CandidateAuthData): Promise<AuthResponse> {
    console.log('üöÄ candidateAuthService.authenticate –≤—ã–∑–≤–∞–Ω');
    console.log('üìù –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', { email: authData.email, firstName: authData.firstName, positionId: authData.positionId });
    
    try {
      console.log('üîê –í—ã–∑—ã–≤–∞–µ–º candidateApiService.loginCandidate...');
      const response = await candidateApiService.loginCandidate({
        firstName: authData.firstName,
        lastName: authData.lastName,
        email: authData.email,
        positionId: authData.positionId
      });

      console.log('üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç candidateApiService:', response);

      // API –ø–æ OpenAPI –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç interview –∏ verificationRequired
      if (response.verificationRequired && (response as any).interview?.id) {
        const interviewId = Number((response as any).interview.id);
        console.log('‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è, interviewId:', interviewId);
        return {
          success: true,
          interviewId,
          message: '–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è email'
        };
      } else {
        console.warn('‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏, –Ω–µ—Ç interview.id');
        return {
          success: false,
          error: '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç interview.id'
        };
      }
    } catch (error: any) {
      console.error('üí• –û—à–∏–±–∫–∞ –≤ candidateAuthService.authenticate:', error);
      
      const errorMessage = error.message || '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏';
      if (errorMessage.includes('–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ') ||
          errorMessage.toLowerCase().includes('found user false') ||
          errorMessage.toLowerCase().includes('candidate not found')) {
        console.log('üö´ –ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É');
        return {
          success: false,
          error: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–ª—è –≤–∞—Å –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–µ–∫—Ä—É—Ç–µ—Ä—É.'
        };
      }
      
      console.log('üö® –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â—É—é –æ—à–∏–±–∫—É:', errorMessage);
      return {
        success: false,
        error: errorMessage
      };
    }
  }

  /**
   * –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è email
   */
  async verifyEmail(email: string, verificationCode: string): Promise<AuthResponse> {
    try {
      console.log('Starting email verification:', { email, code: verificationCode });

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π endpoint verifyCandidateEmail
      const response = await candidateApiService.verifyCandidateEmail({
        email,
        verificationCode
      });

      console.log('Email verification response:', response);

      const interviewId = response?.interview?.id as number | undefined;

      return {
        success: response.success,
        interviewId,
        token: (response as any)?.token,
        message: response.success ? 'Email —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω' : '–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ email'
      };
    } catch (error: any) {
      console.error('Email verification failed:', error);
      
      return {
        success: false,
        error: error.message || '–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ email'
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ ID –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏–∑ localStorage
   */
  getCandidateId(): string | null {
    return null;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
   */
  getAuthToken(): string | null {
    return null;
  }

  /**
   * –ê–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
   */
  getToken(): string | null {
    return this.getAuthToken();
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
   */
  getCandidateData(): any {
    const candidateId = this.getCandidateId();
    const token = this.getAuthToken();
    
    if (candidateId && token) {
      return {
        candidateId,
        token,
        isAuthenticated: true
      };
    }
    
    return null;
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
   */
  saveCandidateData(_data: any): void {}

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
   */
  isAuthenticated(): boolean { return false; }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
   */
  clearAuth(): void { console.log('Auth data cleared'); }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ
   */
  async getCandidateInfo(): Promise<any> {
    try {
      const candidateId = this.getCandidateId();
      if (!candidateId) {
        throw new Error('–ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      const token = this.getToken();
      if (!token) {
        throw new Error('–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      return await candidateApiService.getCandidateInfo(candidateId, token);
    } catch (error: any) {
      console.error('Failed to get candidate info:', error);
      throw error;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –∏–Ω—Ç–µ—Ä–≤—å—é
   */
  async submitAnswer(questionId: string, answer: string): Promise<any> {
    try {
      const candidateId = this.getCandidateId();
      if (!candidateId) {
        throw new Error('–ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      const token = this.getToken();
      if (!token) {
        throw new Error('–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      return await candidateApiService.submitInterviewAnswer(candidateId, questionId, answer, token);
    } catch (error: any) {
      console.error('Failed to submit answer:', error);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –ø–æ email
   */
  async checkInterviewExists(email: string): Promise<{ exists: boolean, interviewId?: number, message?: string }> {
    try {
      console.log('Checking interview exists for email:', email);
      
      const response = await candidateApiService.checkInterviewExists(email);
      console.log('Interview check response:', response);
      
      return {
        exists: response.exists,
        interviewId: response.interviewId,
        message: response.exists ? '–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ' : '–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
      };
    } catch (error: any) {
      console.error('Check interview exists failed:', error);
      
      return {
        exists: false,
        message: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è'
      };
    }
  }

  /**
   * –°—Ç–∞—Ä—Ç —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è
   */
  async startInterview(interviewId: number, token: string): Promise<{ success: boolean, message?: string }> {
    try {
      console.log('Starting interview:', { interviewId, token: token.substring(0, 10) + '...' });
      
      const response = await candidateApiService.startInterview(interviewId, token);
      console.log('Start interview response:', response);
      
      if (response.success) {
        return {
          success: true,
          message: '–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ'
        };
      } else {
        return {
          success: false,
          message: '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è'
        };
      }
    } catch (error: any) {
      console.error('Start interview failed:', error);
      
      return {
        success: false,
        message: error.message || '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è'
      };
    }
  }

  // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞–∫–∞–Ω—Å–∏–∏
  async getPositionSummary(positionId: number): Promise<{ 
    id: number; 
    title: string; 
    department: string;
    company: string;
    type: string;
    questionsCount: number 
  }> {
    try {
      const response = await candidateApiService.getPositionSummary(positionId);
      return response;
    } catch (error: any) {
      console.error('Error getting position summary:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–∫–∞–Ω—Å–∏–∏');
    }
  }
}

export const candidateAuthService = new CandidateAuthService();

