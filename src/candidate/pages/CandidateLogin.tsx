import { useState, useEffect } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import { Button } from '../components/';
import { Input } from '../components/ui/input';
import { Label } from '../components/ui/label';
import { WMTLogo } from '../components/';
import { HelpButton, HelpModal } from '../components/';
import { Loader2 } from 'lucide-react';
import { candidateAuthService, CandidateAuthData } from '../services/candidateAuthService';

interface JobPosition {
  title: string;
  department: string;
  company: string;
  type: string;
  questionsCount: number;
}

const CandidateLogin: React.FC = () => {
  const navigate = useNavigate();
  const { interviewId } = useParams<{ interviewId: string }>();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ candidateAuthService –¥–æ—Å—Ç—É–ø–µ–Ω
  console.log('üîç candidateAuthService –¥–æ—Å—Ç—É–ø–µ–Ω:', !!candidateAuthService);
  console.log('üîç candidateAuthService.authenticate –¥–æ—Å—Ç—É–ø–µ–Ω:', !!candidateAuthService?.authenticate);
  
  const [firstName, setFirstName] = useState('–¢–µ—Å—Ç');
  const [lastName, setLastName] = useState('–ö–∞–Ω–¥–∏–¥–∞—Ç');
  const [email, setEmail] = useState('test@example.com');
  const [errors, setErrors] = useState<{ [key: string]: string }>({});
  const [isHelpModalOpen, setIsHelpModalOpen] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [serverError, setServerError] = useState<string>('');
  const [fieldErrors, setFieldErrors] = useState<{ [key: string]: string }>({});
  const [jobPosition, setJobPosition] = useState<JobPosition | null>(null);
  const [isLoadingPosition, setIsLoadingPosition] = useState(true);
  const [positionId, setPositionId] = useState<number | null>(null);

  // –ü–æ–ª—É—á–∞–µ–º positionId –∏–∑ interviewId —á–µ—Ä–µ–∑ API
  useEffect(() => {
    console.log('üîÑ useEffect –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤—ã–∑–≤–∞–Ω');
    console.log('üìù interviewId:', interviewId);
    
    const loadPositionInfo = async () => {
      if (!interviewId) {
        console.log('‚ùå interviewId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        return;
      }
      
      try {
        console.log('üì§ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è interviewId:', interviewId);
        setIsLoadingPosition(true);
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–∫–∞–Ω—Å–∏–∏ —á–µ—Ä–µ–∑ interviewId
        console.log('üîê –í—ã–∑—ã–≤–∞–µ–º candidateAuthService.getPositionSummary...');
        const positionSummary = await candidateAuthService.getPositionSummary(parseInt(interviewId, 10));
        console.log('üì• –ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞–∫–∞–Ω—Å–∏–∏:', positionSummary);
        
        setJobPosition({
          title: positionSummary.title,
          department: positionSummary.department,
          company: positionSummary.company,
          type: positionSummary.type,
          questionsCount: positionSummary.questionsCount
        });
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ API
        console.log('üíæ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º positionId:', positionSummary.id);
        setPositionId(positionSummary.id);
      } catch (error) {
        console.error('üí• –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞–∫–∞–Ω—Å–∏–∏:', error);
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É –∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π positionId
        console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–∞–Ω–Ω—ã–µ');
        setJobPosition({
          title: 'Software Engineer',
          department: 'Engineering',
          company: 'WMT group',
          type: 'Full-time',
          questionsCount: 6
        });
        const fallbackPositionId = parseInt(interviewId, 10);
        console.log('üíæ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º fallback positionId:', fallbackPositionId);
        setPositionId(fallbackPositionId);
      } finally {
        console.log('üèÅ –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞–∫–∞–Ω—Å–∏–∏');
        setIsLoadingPosition(false);
      }
    };

    loadPositionInfo();
  }, [interviewId]);

  const validateForm = (): boolean => {
    const newErrors: { [key: string]: string } = {};

    if (!firstName.trim()) {
      newErrors.firstName = '–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è';
    } else if (firstName.trim().length < 2) {
      newErrors.firstName = '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞';
    }

    if (!lastName.trim()) {
      newErrors.lastName = '–§–∞–º–∏–ª–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è';
    } else if (lastName.trim().length < 2) {
      newErrors.lastName = '–§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞';
    }

    if (!email.trim()) {
      newErrors.email = 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è';
    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
      newErrors.email = '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email';
    }

    setFieldErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    console.log('üöÄ handleSubmit –≤—ã–∑–≤–∞–Ω');
    console.log('üìù –¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ñ–æ—Ä–º—ã:', { firstName, lastName, email, positionId });
    
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—à–∏–±–∫–∏
    setServerError('');
    setFieldErrors({});
    
    if (!validateForm()) {
      console.log('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã –Ω–µ –ø—Ä–æ—à–ª–∞');
      return;
    }

    if (!positionId) {
      console.log('‚ùå positionId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      setServerError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
      return;
    }

    console.log('‚úÖ –§–æ—Ä–º–∞ –≤–∞–ª–∏–¥–Ω–∞, –Ω–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É');
    setIsLoading(true);

    try {
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ª–æ–≥–∏–Ω –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:', { 
        firstName: firstName.trim(), 
        lastName: lastName.trim(), 
        email: email.trim(),
        positionId 
      });

      // –í—ã–∑—ã–≤–∞–µ–º API –ª–æ–≥–∏–Ω–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
      console.log('üîê –í—ã–∑—ã–≤–∞–µ–º candidateAuthService.authenticate...');
      const response = await candidateAuthService.authenticate({
        firstName: firstName.trim(),
        lastName: lastName.trim(),
        email: email.trim(),
        positionId
      });

      console.log('üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç candidateAuthService:', response);

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¢–û–õ–¨–ö–û –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –æ—Ç–≤–µ—Ç–µ
      if (response.success) {
        console.log('‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:', response);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å candidateId –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if (response.candidateId) {
          console.log('üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏');
          // –£—Å–ø–µ—à–Ω—ã–π –ª–æ–≥–∏–Ω - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
          navigate(`/candidate/verify-email?email=${encodeURIComponent(email.trim())}&interviewId=${interviewId}`);
        } else {
          console.log('‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç - –Ω–µ—Ç candidateId');
          // –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
          setServerError('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }
      } else {
        // –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        console.log('‚ùå –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å:', response.error);
        setServerError(response.error || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      }
    } catch (error: any) {
      console.error('üí• –û—à–∏–±–∫–∞ –≤ handleSubmit:', error);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
      let errorMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏';
      
      if (error.response?.status === 400) {
        errorMessage = '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.';
      } else if (error.response?.status === 404) {
        errorMessage = '–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–ª—è –≤–∞—Å –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–µ–∫—Ä—É—Ç–µ—Ä—É.';
      } else if (error.response?.status === 403) {
        errorMessage = '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ.';
      } else if (error.response?.status >= 500) {
        errorMessage = '–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
      } else if (error.message) {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
        if (error.message.includes('–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ') ||
            error.message.toLowerCase().includes('found user false') ||
            error.message.toLowerCase().includes('candidate not found')) {
          errorMessage = '–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–ª—è –≤–∞—Å –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–µ–∫—Ä—É—Ç–µ—Ä—É.';
        } else if (error.message.includes('positionId') || error.message.includes('–≤–∞–∫–∞–Ω—Å–∏–∏')) {
          errorMessage = '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–µ–∫—Ä—É—Ç–µ—Ä—É.';
        } else {
          errorMessage = error.message;
        }
      }
      
      console.log('üö® –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', errorMessage);
      setServerError(errorMessage);
    } finally {
      console.log('üèÅ –ó–∞–≤–µ—Ä—à–∞–µ–º handleSubmit, —É–±–∏—Ä–∞–µ–º loading');
      setIsLoading(false);
    }
  };

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–æ–∫–∞ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–∞–∫–∞–Ω—Å–∏–∏
  if (isLoadingPosition) {
    return (
      <div className="bg-[#e9eae2] min-h-screen w-full flex items-center justify-center">
        <div className="text-center">
          <Loader2 className="w-8 h-8 animate-spin mx-auto mb-4 text-[#e16349]" />
          <p className="text-[#001a2c]">–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞–∫–∞–Ω—Å–∏–∏...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="bg-[#e9eae2] min-h-screen w-full">
      <div className="w-full h-full flex flex-col">
        <div className="flex flex-col gap-4 p-6 w-full h-full">
          
          {/* Header */}
          <div className="flex items-center justify-between w-full">
            <WMTLogo size="medium" />
            <HelpButton onClick={() => setIsHelpModalOpen(true)} />
          </div>

          {/* Main Content */}
          <div className="flex-1 flex items-center justify-center px-4">
            <div className="w-full max-w-md">
              <div className="bg-[#f5f6f1] rounded-[44px] p-8 shadow-[0px_8px_32px_0px_rgba(0,0,0,0.08)] border border-[#e2e4e9]">
                
                {/* Job Position Card */}
                {jobPosition && (
                  <div className="bg-white rounded-[32px] p-6 mb-8 border border-[#e2e4e9]">
                    <div className="flex items-start justify-between mb-4">
                      <div>
                        <h2 className="text-[20px] font-bold text-[#001a2c] mb-1">
                          {jobPosition.title}
                        </h2>
                        <p className="text-[#868c98] text-sm">
                          {jobPosition.department} ‚Ä¢ {jobPosition.company}
                        </p>
                      </div>
                      <div className="bg-[#e16349] text-white px-3 py-1 rounded-full text-xs font-medium">
                        {jobPosition.type}
                      </div>
                    </div>
                    <div className="flex items-center gap-2 text-[#868c98] text-sm">
                      <span>üìù</span>
                      <span>{jobPosition.questionsCount} –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –∏–Ω—Ç–µ—Ä–≤—å—é</span>
                    </div>
                  </div>
                )}

                {/* Title */}
                <h1 className="text-[28px] font-bold text-[#001a2c] text-center mb-2">
                  –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å
                </h1>

                {/* Description */}
                <p className="text-[#868c98] text-center mb-8">
                  –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é
                </p>

                {/* Form */}
                <form onSubmit={handleSubmit} className="space-y-6">
                  <div>
                    <Label htmlFor="firstName" className="text-[#001a2c] font-medium mb-2 block">
                      –ò–º—è *
                    </Label>
                    <Input
                      id="firstName"
                      type="text"
                      value={firstName}
                      onChange={(e) => setFirstName(e.target.value)}
                      placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
                      className={`w-full h-12 px-4 border-[#e2e4e9] rounded-xl bg-white focus:border-[#e16349] focus:ring-[#e16349] ${
                        fieldErrors.firstName ? 'border-red-300 focus:border-red-500 focus:ring-red-500' : ''
                      }`}
                      disabled={isLoading}
                    />
                    {fieldErrors.firstName && (
                      <p className="text-red-500 text-sm mt-1">{fieldErrors.firstName}</p>
                    )}
                  </div>

                  <div>
                    <Label htmlFor="lastName" className="text-[#001a2c] font-medium mb-2 block">
                      –§–∞–º–∏–ª–∏—è *
                    </Label>
                    <Input
                      id="lastName"
                      type="text"
                      value={lastName}
                      onChange={(e) => setLastName(e.target.value)}
                      placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é"
                      className={`w-full h-12 px-4 border-[#e2e4e9] rounded-xl bg-white focus:border-[#e16349] focus:ring-[#e16349] ${
                        fieldErrors.lastName ? 'border-red-300 focus:border-red-500 focus:ring-red-500' : ''
                      }`}
                      disabled={isLoading}
                    />
                    {fieldErrors.lastName && (
                      <p className="text-red-500 text-sm mt-1">{fieldErrors.lastName}</p>
                    )}
                  </div>

                  <div>
                    <Label htmlFor="email" className="text-[#001a2c] font-medium mb-2 block">
                      Email *
                    </Label>
                    <Input
                      id="email"
                      type="email"
                      value={email}
                      onChange={(e) => setEmail(e.target.value)}
                      placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email"
                      className={`w-full h-12 px-4 border-[#e2e4e9] rounded-xl bg-white focus:border-[#e16349] focus:ring-[#e16349] ${
                        fieldErrors.email ? 'border-red-300 focus:border-red-500 focus:ring-red-500' : ''
                      }`}
                      disabled={isLoading}
                    />
                    {fieldErrors.email && (
                      <p className="text-red-500 text-sm mt-1">{fieldErrors.email}</p>
                    )}
                  </div>

                  {/* Server Error Message - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä—è–º–æ –Ω–∞–¥ –∫–Ω–æ–ø–∫–æ–π */}
                  {serverError && (
                    <div className="bg-red-50 border border-red-200 rounded-xl p-4">
                      <div className="flex items-start gap-3">
                        <div className="flex-shrink-0 w-5 h-5 mt-0.5">
                          <svg className="w-5 h-5 text-red-400" fill="currentColor" viewBox="0 0 20 20">
                            <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
                          </svg>
                        </div>
                        <div className="flex-1">
                          <p className="text-red-800 text-sm font-medium">–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</p>
                          <p className="text-red-700 text-sm mt-1">{serverError}</p>
                        </div>
                      </div>
                    </div>
                  )}

                  {/* Submit Button */}
                  <Button
                    type="submit"
                    disabled={isLoading || !positionId}
                    className="w-full h-12 bg-[#e16349] hover:bg-[#d14a31] disabled:bg-[#f0f1ea] text-white disabled:text-[#868c98] rounded-xl font-medium transition-all duration-200"
                  >
                    {isLoading ? (
                      <>
                        <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                        –í—Ö–æ–¥...
                      </>
                    ) : (
                      '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'
                    )}
                  </Button>
                </form>

                {/* Help Text */}
                <div className="mt-8 p-4 bg-[#f8f9f4] rounded-xl">
                  <p className="text-[#868c98] text-sm text-center">
                    –ü–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ –≤–∞—à email
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Help Modal */}
      <HelpModal 
        isOpen={isHelpModalOpen} 
        onClose={() => setIsHelpModalOpen(false)} 
      />
    </div>
  );
};

export default CandidateLogin;
