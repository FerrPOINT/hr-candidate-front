import { useState, useEffect, useRef, useCallback, useMemo } from 'react';
import { Button } from './';
import { HelpModal, HelpButton, WMTLogo } from './';
import { InstructionsModal } from './InstructionsModal';
import { AIAvatarWithWaves } from './AIAvatarWithWaves';
import { Loader2 } from 'lucide-react';
import { motion, AnimatePresence } from 'framer-motion';

// Import types and utilities
import { ProcessStage, AIMessage, QuestionCard } from './interview/types';
import { processQuestions, readingText } from './interview/constants';
import { createQuestionCard, markQuestionAsCompleted, updateQuestionTime } from './interview/utils';

// Import components
import { MessageBubble } from './interview/MessageBubble';
import { QuestionProgressIndicator } from './interview/QuestionProgressIndicator';
import { QuestionCardComponent } from './interview/QuestionCardComponent';
import { MicrophoneTestCard } from './interview/MicrophoneTestCard';
import { ReadingTestCard } from './interview/ReadingTestCard';
import { CandidateQuestions } from './CandidateQuestions';

export function InterviewProcess() {
  const [stage, setStage] = useState<ProcessStage>('welcome');
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [timeRemaining, setTimeRemaining] = useState(150);
  const [isRecording, setIsRecording] = useState(false);
  const [isHelpModalOpen, setIsHelpModalOpen] = useState(false);
  const [isInstructionsModalOpen, setIsInstructionsModalOpen] = useState(false);
  const [isTranscribing, setIsTranscribing] = useState(false);
  const [isSavingAnswer, setIsSavingAnswer] = useState(false);
  const [showContinueButton, setShowContinueButton] = useState(false);
  const [messages, setMessages] = useState<(AIMessage | { id: string; content: string; isVisible: boolean; isNew: boolean; isUser: boolean })[]>([]);
  const [questionCards, setQuestionCards] = useState<QuestionCard[]>([]); // –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  const [userResponse, setUserResponse] = useState(''); // –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  const [currentMessageIndex, setCurrentMessageIndex] = useState(0);
  const [isAISpeaking, setIsAISpeaking] = useState(true);
  const [showMicrophoneCard, setShowMicrophoneCard] = useState(false);
  const [timerStarted, setTimerStarted] = useState(false);
  
  const timerRef = useRef<ReturnType<typeof setTimeout> | null>(null);
  const messageTimerRef = useRef<ReturnType<typeof setTimeout> | null>(null);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const scrollContainerRef = useRef<HTMLDivElement>(null);

  // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ welcome —Å–æ–æ–±—â–µ–Ω–∏—è
  const welcomeMessages = useMemo(() => [
    { id: '1', content: '–ü—Ä–∏–≤–µ—Ç !', isVisible: false },
    { id: '2', content: '–Ø —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä.', isVisible: false },
    { id: '3', content: '–Ø –∑–∞–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∞ –æ—Ü–µ–Ω–∏—Ç—å —Ç–≤–æ–∏ –∑–Ω–∞–Ω–∏—è —Å –ø–æ–º–æ—â—å—é —Ä—è–¥–∞ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤. –î–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å —É —Ç–µ–±—è –±—É–¥–µ—Ç 2 –º–∏–Ω—É—Ç—ã 30 —Å–µ–∫—É–Ω–¥.', isVisible: false },
    { id: '4', content: '–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç, –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω. –î–∞–≤–∞–π –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –æ–Ω –≤–∫–ª—é—á–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç.', isVisible: false }
  ], []);

  // –ù–ê–î–ï–ñ–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ—Å–∫—Ä–æ–ª–ª–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
  const scrollToBottom = useCallback(() => {
    const container = scrollContainerRef.current;
    if (!container) return;

    // –ù–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫ —Å–∫—Ä–æ–ª–ª–∞ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    const scroll = () => {
      container.scrollTop = container.scrollHeight;
    };

    // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞
    scroll();
    
    // –ü–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ requestAnimationFrame
    requestAnimationFrame(scroll);
    
    // –ü–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ setTimeout
    setTimeout(scroll, 50);
    
    // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ –±–æ–ª—å—à–∏–π timeout
    setTimeout(scroll, 200);
  }, []);

  // Initialize welcome messages
  useEffect(() => {
    console.log('üü¢ InterviewProcess: Initializing welcome messages');
    
    setMessages(welcomeMessages);
    setCurrentMessageIndex(0);
    setIsAISpeaking(true);
    setShowMicrophoneCard(false);
    
    const showNextMessage = (index: number) => {
      console.log(`üìù Showing message ${index + 1}/${welcomeMessages.length}`);
      
      if (index < welcomeMessages.length) {
        setMessages(prev => prev.map((msg, i) => 
          i === index ? { ...msg, isVisible: true, isNew: true } : msg
        ));
        setCurrentMessageIndex(index);
        
        // –°–∫—Ä–æ–ª–ª –ø–æ—Å–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        scrollToBottom();
        
        setTimeout(() => {
          setMessages(prev => prev.map((msg, i) => 
            i === index ? { ...msg, isNew: false } : msg
          ));
        }, 500);
        
        const delay = Math.max(1000, welcomeMessages[index].content.length * 50);
        messageTimerRef.current = setTimeout(() => {
          showNextMessage(index + 1);
        }, delay);
      } else {
        console.log('üìù All messages shown, adding microphone card to messages');
        messageTimerRef.current = setTimeout(() => {
          const microphoneCard = { 
            id: 'microphone-card', 
            content: 'microphone-card', 
            isVisible: true, 
            isNew: true,
            type: 'microphone-card'
          } as any;
          setMessages(prev => [...prev, microphoneCard]);
          setShowMicrophoneCard(true);
          setIsAISpeaking(false);
          
          // –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Å–∫—Ä–æ–ª–ª –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
          setTimeout(() => scrollToBottom(), 10);
          setTimeout(() => scrollToBottom(), 100);
          setTimeout(() => scrollToBottom(), 300);
        }, 1000);
      }
    };

    messageTimerRef.current = setTimeout(() => {
      showNextMessage(0);
    }, 1000);

    return () => {
      if (messageTimerRef.current) {
        clearTimeout(messageTimerRef.current);
      }
    };
  }, [welcomeMessages, scrollToBottom]);

  // –ü—Ä–æ—Å—Ç–æ–π –∞–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  useEffect(() => {
    scrollToBottom();
  }, [messages, scrollToBottom]);



  // Timer logic
  useEffect(() => {
    if ((stage === 'question' || stage === 'recording-answer') && timerStarted && timeRemaining > 0) {
      timerRef.current = setTimeout(() => {
        setTimeRemaining(prev => {
          const newTime = prev - 1;
          console.log(`‚è∞ Timer tick: ${newTime} seconds remaining`, { stage, timerStarted });
          setQuestionCards(prev => updateQuestionTime(prev, newTime));
          return newTime;
        });
      }, 1000);
    } else if (timeRemaining === 0 && (stage === 'question' || stage === 'recording-answer') && timerStarted) {
      // –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
      console.log('‚è∞ Time up for question', currentQuestionIndex + 1);
      
             if (currentQuestionIndex < processQuestions.length - 1) {
         const nextIndex = currentQuestionIndex + 1;
         setCurrentQuestionIndex(nextIndex);
         setTimeRemaining(150);
         setStage('question');
         setIsAISpeaking(true);
         setTimerStarted(true); // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä —Å—Ä–∞–∑—É
         
         // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
         const newQuestionCard = createQuestionCard(nextIndex, processQuestions);
         setQuestionCards(prev => [...prev, newQuestionCard]);
         
         const questionCardMsg = { 
           id: `question-card-${nextIndex}`, 
           content: `question-card-${nextIndex}`, 
           isVisible: true, 
           isNew: true,
           type: 'question-card',
           questionCard: newQuestionCard
         } as any;
         setMessages(prev => [...prev, questionCardMsg]);
         
         // –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Å–∫—Ä–æ–ª–ª –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
         setTimeout(() => scrollToBottom(), 10);
         setTimeout(() => scrollToBottom(), 100);
         setTimeout(() => scrollToBottom(), 300);
         
         setTimeout(() => {
           setQuestionCards(prev => prev.map(card =>
             card.id === newQuestionCard.id ? { ...card, isNew: false } : card
           ));
           setMessages(prev => prev.map(msg => 
             msg.id === `question-card-${nextIndex}` ? { ...msg, isNew: false } : msg
           ));
         }, 500);
         
         setTimeout(() => {
           setIsAISpeaking(false);
         }, 2000);
      } else {
        console.log('‚úÖ All questions completed, moving to candidate questions');
        setStage('candidate-questions');
        setIsAISpeaking(false);
      }
    }

    return () => {
      if (timerRef.current) {
        clearTimeout(timerRef.current);
      }
    };
  }, [timeRemaining, stage, timerStarted, currentQuestionIndex]);

  const addQuestionCard = useCallback((questionIndex: number) => {
    console.log(`‚ûï Adding question card ${questionIndex + 1}`);
    const newQuestionCard = createQuestionCard(questionIndex, processQuestions);
    setQuestionCards(prev => [...prev, newQuestionCard]);
    
    // –î–æ–±–∞–≤–ª—è–µ–º question card –≤ —Å–æ–æ–±—â–µ–Ω–∏—è
    const questionCardMsg = { 
      id: `question-card-${questionIndex}`, 
      content: `question-card-${questionIndex}`, 
      isVisible: true, 
      isNew: true,
      type: 'question-card',
      questionCard: newQuestionCard
    } as any;
    setMessages(prev => [...prev, questionCardMsg]);
    
    // –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Å–∫—Ä–æ–ª–ª –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
    setTimeout(() => scrollToBottom(), 10);
    setTimeout(() => scrollToBottom(), 100);
    setTimeout(() => scrollToBottom(), 300);
    
    setTimeout(() => {
      setQuestionCards(prev => prev.map(card =>
        card.id === newQuestionCard.id ? { ...card, isNew: false } : card
      ));
      setMessages(prev => prev.map(msg => 
        msg.id === `question-card-${questionIndex}` ? { ...msg, isNew: false } : msg
      ));
    }, 500);
  }, []);

  const completeQuestion = useCallback((questionIndex: number) => {
    console.log(`‚úÖ Completing question ${questionIndex + 1}`);
    setQuestionCards(prev => markQuestionAsCompleted(prev, questionIndex));
  }, []);

  // Event handlers
  const handleMicrophoneTest = useCallback(() => {
    console.log('üé§ Starting microphone test');
    setStage('recording-test');
    setIsRecording(true);
    setIsAISpeaking(false);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ (–ø–æ—è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏)
    const readingMessage = { 
      id: 'reading-message', 
      content: '–ü—Ä–æ—á–∏—Ç–∞–π –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ "–•–æ—Ç–∏—Ç–µ –ø–æ–Ω—è—Ç—å –¥—Ä—É–≥–∏—Ö ‚Äì –ø—Ä–∏—Å—Ç–∞–ª—å–Ω–µ–µ —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ —Å–∞–º–æ–≥–æ —Å–µ–±—è."', 
      isVisible: true, 
      isNew: true
    } as any;
    setMessages(prev => [...prev, readingMessage]);
    
    // –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Å–∫—Ä–æ–ª–ª –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    setTimeout(() => scrollToBottom(), 10);
    setTimeout(() => scrollToBottom(), 100);
    setTimeout(() => scrollToBottom(), 300);
  }, []);

  const handleContinueToInstructions = useCallback(() => {
    console.log('üìã Opening instructions modal');
    setShowContinueButton(false);
    setIsInstructionsModalOpen(true);
  }, []);

  const handleStopMicrophoneTest = useCallback(() => {
    console.log('‚èπÔ∏è Stopping microphone test');
    setIsRecording(false);
    setIsTranscribing(true);
    
    setTimeout(() => {
      setIsTranscribing(false);
      const userMsg = { 
        id: 'user-response', 
        content: "–ü—Ä–∏–≤–µ—Ç, –ø—Ä–∏–≤–µ—Ç. –ú–µ–Ω—è —Ö–æ—Ä–æ—à–æ —Å–ª—ã—à–Ω–æ ?", 
        isVisible: true, 
        isNew: true, 
        isUser: true 
      } as any;
      setMessages(prev => [...prev, userMsg]);
      setUserResponse("–ü—Ä–∏–≤–µ—Ç, –ø—Ä–∏–≤–µ—Ç. –ú–µ–Ω—è —Ö–æ—Ä–æ—à–æ —Å–ª—ã—à–Ω–æ ?");
      
      // –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Å–∫—Ä–æ–ª–ª –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
      setTimeout(() => scrollToBottom(), 10);
      setTimeout(() => scrollToBottom(), 100);
      setTimeout(() => scrollToBottom(), 300);
      
      console.log('‚ú® User response recorded, showing success messages');
      
      setTimeout(() => {
        const firstMessage = { id: 'success1', content: '–í—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ! –Ø —Å–ª—ã—à—É —Ç–µ–±—è —Ö–æ—Ä–æ—à–æ.ü•≥', isVisible: true, isNew: true };
        setMessages(prev => [...prev, firstMessage]);
        
        // –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Å–∫—Ä–æ–ª–ª –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        setTimeout(() => scrollToBottom(), 10);
        setTimeout(() => scrollToBottom(), 100);
        setTimeout(() => scrollToBottom(), 300);
        
        setTimeout(() => {
          setMessages(prev => prev.map(msg => 
            msg.id === 'success1' ? { ...msg, isNew: false } : msg
          ));
        }, 500);
        
        setIsAISpeaking(true);
        
        setTimeout(() => {
          const secondMessage = { id: 'success2', content: '–ö–∞–∫ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤ - –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é', isVisible: true, isNew: true };
          setMessages(prev => [...prev, secondMessage]);
          
          // –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Å–∫—Ä–æ–ª–ª –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
          setTimeout(() => scrollToBottom(), 10);
          setTimeout(() => scrollToBottom(), 100);
          setTimeout(() => scrollToBottom(), 300);
          
          setTimeout(() => {
            setMessages(prev => prev.map(msg => 
              msg.id === 'success2' ? { ...msg, isNew: false } : msg
            ));
          }, 500);
          
          setTimeout(() => {
            setIsAISpeaking(false);
            setShowContinueButton(true);
            console.log('‚ñ∂Ô∏è Continue button shown');
          }, 2000);
        }, 2000);
      }, 1000);
    }, 2000);
  }, []);

  const handleStartInterview = useCallback(() => {
    console.log('üöÄ Starting interview');
    setIsInstructionsModalOpen(false);
    setStage('question');
    setTimeRemaining(150);
    setCurrentQuestionIndex(0);
    setIsAISpeaking(true);
    setTimerStarted(true); // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä —Å—Ä–∞–∑—É
    
    addQuestionCard(0);
    
    setTimeout(() => {
      setIsAISpeaking(false);
      console.log('‚è∞ Timer started for question 1');
    }, 2000);
  }, [addQuestionCard]);

  const handleRecordAnswer = useCallback(() => {
    console.log('üéôÔ∏è Starting to record answer for question', currentQuestionIndex + 1);
    setStage('recording-answer');
    setIsRecording(true);
    setIsAISpeaking(false);
    // –ù–ï —Ç—Ä–æ–≥–∞–µ–º —Ç–∞–π–º–µ—Ä - –æ–Ω –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –µ—Å—Ç—å
  }, [currentQuestionIndex]);

  const handleSkipQuestion = useCallback(() => {
    console.log(`‚è≠Ô∏è Skipping question ${currentQuestionIndex + 1}`);
    completeQuestion(currentQuestionIndex);
    
         if (currentQuestionIndex < processQuestions.length - 1) {
       const nextIndex = currentQuestionIndex + 1;
       setCurrentQuestionIndex(nextIndex);
       setTimeRemaining(150);
       setStage('question');
       setIsAISpeaking(true);
       setTimerStarted(true); // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä —Å—Ä–∞–∑—É
       
       addQuestionCard(nextIndex);
       
       setTimeout(() => {
         setIsAISpeaking(false);
         console.log('‚è∞ Timer started for question', nextIndex + 1);
       }, 2000);
    } else {
      console.log('‚úÖ All questions completed, moving to candidate questions');
      setStage('candidate-questions');
      setIsAISpeaking(false);
    }
  }, [currentQuestionIndex, completeQuestion, addQuestionCard]);

  const handleStopRecording = useCallback(() => {
    console.log('‚èπÔ∏è Stopping recording for question', currentQuestionIndex + 1);
    setIsRecording(false);
    setIsTranscribing(true);
    
    // –°–∏–º—É–ª—è—Ü–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    setTimeout(() => {
      setIsTranscribing(false);
      setIsSavingAnswer(true);
      console.log('üíæ Saving answer for question', currentQuestionIndex + 1);
      
      // –°–∏–º—É–ª—è—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      setTimeout(() => {
        setIsSavingAnswer(false);
        completeQuestion(currentQuestionIndex);
        console.log('‚úÖ Answer saved and question completed');
        
                 // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
         if (currentQuestionIndex < processQuestions.length - 1) {
           const nextIndex = currentQuestionIndex + 1;
           console.log(`‚û°Ô∏è Moving to question ${nextIndex + 1}`);
           setCurrentQuestionIndex(nextIndex);
           setTimeRemaining(150);
           setStage('question');
           setIsAISpeaking(true);
           setTimerStarted(true); // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä —Å—Ä–∞–∑—É
           
           addQuestionCard(nextIndex);
           
           setTimeout(() => {
             setIsAISpeaking(false);
           }, 2000);
        } else {
          console.log('‚úÖ All questions completed, moving to candidate questions');
          setStage('candidate-questions');
          setIsAISpeaking(false);
        }
      }, 1000);
    }, 2000);
  }, [currentQuestionIndex, completeQuestion, addQuestionCard]);

  const handleCandidateQuestionsComplete = useCallback(() => {
    console.log('üéâ Interview completed');
    setIsAISpeaking(false);
  }, []);

  // –î–æ–±–∞–≤–ª—è–µ–º AI —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
  const handleAddAiMessage = useCallback((content: string) => {
    const msg = { 
      id: `ai-${Date.now()}`, 
      content, 
      isVisible: true, 
      isNew: true 
    } as AIMessage;
    setMessages(prev => [...prev, msg]);
    
    // –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Å–∫—Ä–æ–ª–ª –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    setTimeout(() => scrollToBottom(), 10);
    setTimeout(() => scrollToBottom(), 100);
    setTimeout(() => scrollToBottom(), 300);
    
    setTimeout(() => {
      setMessages(prev => prev.map(m => (m.id === msg.id ? { ...m, isNew: false } : m)));
    }, 500);
  }, [scrollToBottom]);

  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
  const handleAddUserMessage = useCallback((content: string) => {
    const msg = { 
      id: `user-${Date.now()}`, 
      content, 
      isVisible: true, 
      isNew: true, 
      isUser: true 
    } as any;
    setMessages(prev => [...prev, msg]);
    
    // –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Å–∫—Ä–æ–ª–ª –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    setTimeout(() => scrollToBottom(), 10);
    setTimeout(() => scrollToBottom(), 100);
    setTimeout(() => scrollToBottom(), 300);
    
    setTimeout(() => {
      setMessages(prev => prev.map(m => (m.id === msg.id ? { ...m, isNew: false } : m)));
    }, 500);
  }, [scrollToBottom]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ AI —Ä–µ—á–∏ –¥–ª—è candidate-questions —ç—Ç–∞–ø–∞
  useEffect(() => {
    if (stage === 'candidate-questions') {
      console.log('üí¨ Starting candidate questions phase');
      setIsAISpeaking(true);
      
      const speakingTimer = setTimeout(() => {
        setIsAISpeaking(false);
      }, 8000);
      
      return () => clearTimeout(speakingTimer);
    }
  }, [stage]);

  const handleAISpeakingChange = useCallback((isSpeaking: boolean) => {
    setIsAISpeaking(isSpeaking);
  }, []);

  const handleNewMessage = useCallback(() => {
    scrollToBottom();
  }, [scrollToBottom]);

  // Debug info for current state
  console.log('üéØ Current state:', {
    stage,
    currentQuestionIndex,
    isRecording,
    isTranscribing,
    isSavingAnswer,
    isAISpeaking,
    timerStarted,
    timeRemaining
  });

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∞–≤–∞—Ç–∞—Ä
  const shouldShowAvatar = () => {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä –∫–æ–≥–¥–∞ AI –≥–æ–≤–æ—Ä–∏—Ç
    if (isAISpeaking && !isTranscribing && !isSavingAnswer) {
      return true;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –º–æ–ª—á–∞–Ω–∏—è –Ω–∞ —ç—Ç–∞–ø–µ candidate-questions
    if (stage === 'candidate-questions' && !isTranscribing && !isSavingAnswer) {
      return true;
    }
    
    return false;
  };

  // –ï–¥–∏–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  const renderMessages = () => {
    return (
      <div className="flex flex-col space-y-4">
        {messages.map((message) => (
          message.isVisible && (
            <div key={message.id}>
              {('type' in message && message.type === 'microphone-card') ? (
                <div className="flex justify-start">
                  <MicrophoneTestCard />
                </div>
              ) : ('type' in message && message.type === 'reading-card') ? (
                <div className="flex justify-start">
                  <ReadingTestCard />
                </div>
              ) : ('type' in message && message.type === 'question-card' && 'questionCard' in message) ? (
                <div key={(message.questionCard as any).id}>
                  <QuestionProgressIndicator questionIndex={(message.questionCard as any).questionIndex} />
                                     <QuestionCardComponent 
                     questionCard={{
                       ...(message.questionCard as any),
                       timeRemaining: (message.questionCard as any).questionIndex === currentQuestionIndex && (stage === 'question' || stage === 'recording-answer') ? timeRemaining : null,
                       status: (message.questionCard as any).questionIndex === currentQuestionIndex && (stage === 'question' || stage === 'recording-answer') ? 'active' : 'completed'
                     }} 
                   />
                </div>
              ) : (
                <div className={`flex ${('isUser' in message && message.isUser) ? 'justify-end' : 'justify-start'}`}>
                  {message.id === 'reading-message' ? (
                    <div className="bg-white rounded-br-[24px] rounded-tl-[24px] rounded-tr-[24px] border border-[#e2e4e9] px-8 py-6 max-w-[421px]">
                      <h3 className="text-[#e16349] text-[16px] leading-[24px] tracking-[0.96px] uppercase font-medium font-Inter mb-3">
                        –ü—Ä–æ—á–∏—Ç–∞–π –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
                      </h3>
                      <p className="text-[#0a0d14] text-[16px] leading-[24px] tracking-[-0.176px] font-medium font-Inter">
                        {message.content}
                      </p>
                    </div>
                  ) : (
                    <MessageBubble 
                      content={message.content} 
                      isNew={message.isNew} 
                      isUser={'isUser' in message ? message.isUser : false}
                    />
                  )}
                </div>
              )}
            </div>
          )
        ))}
        
        {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º CandidateQuestions —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —ç—Ç–∞–ø–µ */}
        {stage === 'candidate-questions' && (
          <CandidateQuestions 
            onComplete={handleCandidateQuestionsComplete}
            onAISpeakingChange={handleAISpeakingChange}
            onNewMessage={handleNewMessage}
            onAddAiMessage={handleAddAiMessage}
            onAddUserMessage={handleAddUserMessage}
          />
        )}
      </div>
    );
  };

  // Render stage content
  const renderStageContent = () => {
    console.log(`üé¨ Rendering stage: ${stage}`);
    
    switch (stage) {
      case 'welcome':
      case 'recording-test':
      case 'question':
      case 'recording-answer':
      case 'question-completed':
      case 'candidate-questions':
        return renderMessages();

      default:
        return null;
    }
  };

  // –ö–∞—Å—Ç–æ–º–Ω–∞—è –∫–Ω–æ–ø–∫–∞ "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å" –ø–æ –æ–±—Ä–∞–∑—Ü—É –∏–∑ Figma
  const RecordingButton = () => (
    <button
      onClick={stage === 'recording-test' ? handleStopMicrophoneTest : handleStopRecording}
      className="bg-[#df1c41] relative rounded-[60px] h-16 w-auto hover:bg-[#c7193a] transition-colors duration-200 pulse-recording"
    >
      <div className="flex flex-row items-center relative size-full">
        <div className="box-border content-stretch flex flex-row gap-3 items-center justify-start pl-2 pr-8 py-2 relative size-full">
          {/* –ë–µ–ª—ã–π –∫—Ä—É–≥ —Å –∫—Ä–∞—Å–Ω—ã–º –∫–≤–∞–¥—Ä–∞—Ç–æ–º */}
          <div className="bg-[#ffffff] box-border content-stretch flex flex-row gap-2.5 items-center justify-center overflow-clip p-[8px] relative rounded-[100px] shrink-0 size-12">
            <div className="bg-[#df1c41] rounded shrink-0 size-5" />
          </div>
          {/* –¢–µ–∫—Å—Ç */}
          <div className="flex flex-col font-medium justify-center leading-[0] not-italic relative shrink-0 text-[#ffffff] text-[18px] text-center text-nowrap tracking-[-0.27px]">
            <p className="block leading-[24px] whitespace-pre font-Inter">–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å</p>
          </div>
        </div>
      </div>
    </button>
  );

  return (
    <div className="min-h-screen w-full" style={{ backgroundColor: 'var(--interview-bg)' }}>
      <div className="w-full h-full flex flex-col">
        <div className="flex flex-col gap-4 p-6 w-full h-full">
          
          {/* Header */}
          <div className="flex items-center justify-between w-full h-16">
            <WMTLogo size="medium" />
            <HelpButton onClick={() => setIsHelpModalOpen(true)} />
          </div>

          {/* Main Content Area - —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≤—ã—Å–æ—Ç–æ–π –∏ z-index */}
          <div 
            className="overflow-hidden relative z-40"
            style={{ 
              height: 'calc(100vh - 64px - 96px - 128px - 48px)', // 100vh - header(64px) - downbar(96px) - footer(128px) - padding(48px)
              maxHeight: 'calc(100vh - 64px - 96px - 128px - 48px)'
            }}
          >
            <div 
              ref={scrollContainerRef}
              className="h-full overflow-y-auto px-6 pb-4 custom-scroll-container"
            >
              <div className="max-w-4xl mx-auto">
                {renderStageContent()}
                <div ref={messagesEndRef} />
              </div>
            </div>
          </div>

          {/* Fixed Downbar - —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π */}
          <div className="fixed bottom-32 left-0 right-0 pointer-events-none z-50">
            <div className="w-full max-w-2xl mx-auto px-6 pointer-events-auto">
              <AnimatePresence mode="wait">
                {/* AI Avatar */}
                {shouldShowAvatar() && (
                  <motion.div 
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    exit={{ opacity: 0, y: 20 }}
                    transition={{ duration: 0.4 }}
                    className="flex justify-center"
                    key="avatar"
                  >
                    <AIAvatarWithWaves 
                      size={stage === 'question-completed' ? 'small' : 'large'} 
                      isSpeaking={isAISpeaking}
                    />
                  </motion.div>
                )}
                
                {/* Loader */}
                {(isTranscribing || isSavingAnswer) && (
                  <motion.div 
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    exit={{ opacity: 0, y: 20 }}
                    transition={{ duration: 0.4 }}
                    className="flex justify-center"
                    key="loader"
                  >
                    <div className="text-white rounded-full h-16 w-16 flex items-center justify-center shadow-lg" style={{ backgroundColor: 'var(--interview-accent)' }}>
                      <Loader2 className="w-12 h-12 animate-spin" strokeWidth={2} />
                    </div>
                  </motion.div>
                )}
              </AnimatePresence>
            </div>
          </div>

          {/* Fixed Footer - —Å –∫–Ω–æ–ø–∫–∞–º–∏ */}
          <div className="fixed bottom-0 left-0 right-0 pointer-events-none z-50">
            {/* Gradient Background */}
            <div className="bottom-controls-gradient h-32" />
            
            {/* Controls Container */}
            <div className="absolute inset-0 flex items-end justify-center pointer-events-none">
              <div className="w-full max-w-2xl mx-auto px-6 pb-8 pointer-events-auto">
                {/* Action Buttons */}
                <div className="flex justify-center">
                  {/* Welcome Stage */}
                  {stage === 'welcome' && showMicrophoneCard && !isAISpeaking && !isTranscribing && !isSavingAnswer && (
                    <Button
                      onClick={handleMicrophoneTest}
                      className="bg-[var(--interview-accent)] hover:bg-[var(--interview-accent-hover)] text-white px-8 py-4 font-medium shadow-md transition-all duration-200 hover:shadow-lg text-lg"
                      style={{ borderRadius: '30px', height: '56px' }}
                    >
                      –¢–µ—Å—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
                    </Button>
                  )}

                  {/* Recording Test Stage */}
                  {stage === 'recording-test' && showContinueButton && !isAISpeaking && !isTranscribing && !isSavingAnswer && (
                    <Button
                      onClick={handleContinueToInstructions}
                      className="bg-[var(--interview-accent)] hover:bg-[var(--interview-accent-hover)] text-white px-8 py-4 font-medium shadow-md transition-all duration-200 hover:shadow-lg text-lg"
                      style={{ borderRadius: '30px', height: '56px' }}
                    >
                      –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
                    </Button>
                  )}

                  {/* Question Stage */}
                  {stage === 'question' && !isAISpeaking && !isRecording && !isTranscribing && !isSavingAnswer && (
                    <div className="flex flex-col sm:flex-row gap-4">
                      <Button
                        onClick={handleRecordAnswer}
                        className="bg-[var(--interview-accent)] hover:bg-[var(--interview-accent-hover)] text-white px-8 py-4 font-medium shadow-md transition-all duration-200 hover:shadow-lg text-lg"
                        style={{ borderRadius: '30px', height: '56px' }}
                      >
                        –ó–∞–ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç
                      </Button>
                      <Button
                        onClick={handleSkipQuestion}
                        className="border-2 border-gray-300 text-gray-700 hover:border-gray-400 hover:bg-gray-50 px-8 py-4 font-medium shadow-md transition-all duration-200 bg-white text-lg"
                        style={{ borderRadius: '30px', height: '56px' }}
                      >
                        –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å
                      </Button>
                    </div>
                  )}

                  {/* Recording Buttons */}
                  {((stage === 'recording-answer' && isRecording) || (stage === 'recording-test' && isRecording)) && (
                    <RecordingButton />
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <HelpModal 
        isOpen={isHelpModalOpen} 
        onClose={() => setIsHelpModalOpen(false)} 
      />

      <InstructionsModal
        isOpen={isInstructionsModalOpen}
        onClose={() => setIsInstructionsModalOpen(false)}
        onStartInterview={handleStartInterview}
      />
    </div>
  );
}
