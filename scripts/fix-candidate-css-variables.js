const fs = require('fs');
const path = require('path');

// –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ä—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –Ω–∞ –Ω–æ–≤—ã–µ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
const variableMapping = {
  '--interview-bg': '--candidate-interview-bg',
  '--interview-substrate': '--candidate-interview-substrate',
  '--interview-accent': '--candidate-interview-accent',
  '--interview-accent-hover': '--candidate-interview-accent-hover',
  '--interview-accent-50': '--candidate-interview-accent-50',
  '--interview-accent-40': '--candidate-interview-accent-40',
  '--interview-accent-35': '--candidate-interview-accent-35',
  '--interview-accent-30': '--candidate-interview-accent-30',
  '--interview-accent-25': '--candidate-interview-accent-25',
  '--interview-accent-18': '--candidate-interview-accent-18',
  '--interview-accent-55': '--candidate-interview-accent-55',
  '--background': '--candidate-background',
  '--foreground': '--candidate-foreground',
  '--card': '--candidate-card',
  '--card-foreground': '--candidate-card-foreground',
  '--popover': '--candidate-popover',
  '--popover-foreground': '--candidate-popover-foreground',
  '--primary': '--candidate-primary',
  '--primary-foreground': '--candidate-primary-foreground',
  '--secondary': '--candidate-secondary',
  '--secondary-foreground': '--candidate-secondary-foreground',
  '--muted': '--candidate-muted',
  '--muted-foreground': '--candidate-muted-foreground',
  '--accent': '--candidate-accent',
  '--accent-foreground': '--candidate-accent-foreground',
  '--destructive': '--candidate-destructive',
  '--destructive-foreground': '--candidate-destructive-foreground',
  '--border': '--candidate-border',
  '--input': '--candidate-input',
  '--input-background': '--candidate-input-background',
  '--ring': '--candidate-ring',
  '--radius': '--candidate-radius',
  '--radius-button': '--candidate-radius-button',
  '--radius-card': '--candidate-radius-card',
  '--radius-tooltip': '--candidate-radius-tooltip',
  '--elevation-sm': '--candidate-elevation-sm'
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª–µ
function replaceVariablesInFile(filePath) {
  try {
    let content = fs.readFileSync(filePath, 'utf8');
    let hasChanges = false;
    
    // –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    for (const [oldVar, newVar] of Object.entries(variableMapping)) {
      if (content.includes(oldVar)) {
        content = content.replace(new RegExp(oldVar.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'g'), newVar);
        hasChanges = true;
      }
    }
    
    if (hasChanges) {
      fs.writeFileSync(filePath, content, 'utf8');
      console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω: ${filePath}`);
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${filePath}:`, error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –æ–±—Ö–æ–¥–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
function processDirectory(dirPath) {
  const items = fs.readdirSync(dirPath);
  
  for (const item of items) {
    const fullPath = path.join(dirPath, item);
    const stat = fs.statSync(fullPath);
    
    if (stat.isDirectory()) {
      processDirectory(fullPath);
    } else if (item.endsWith('.tsx') || item.endsWith('.ts')) {
      replaceVariablesInFile(fullPath);
    }
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  console.log('üîß –ù–∞—á–∏–Ω–∞—é –∑–∞–º–µ–Ω—É CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö candidate...');
  
  const candidateDir = path.join(__dirname, '..', 'src', 'candidate');
  
  if (!fs.existsSync(candidateDir)) {
    console.error('‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è candidate –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
    return;
  }
  
  processDirectory(candidateDir);
  
  console.log('‚úÖ –ó–∞–º–µ–Ω–∞ CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
  console.log('üìù –¢–µ–ø–µ—Ä—å –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–º–µ—é—Ç –ø—Ä–µ—Ñ–∏–∫—Å --candidate-');
}

main(); 