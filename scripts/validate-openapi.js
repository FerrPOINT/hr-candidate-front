const fs = require('fs');
const path = require('path');
const yaml = require('js-yaml');

/**
 * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –≤—Å–µ OpenAPI —Ñ–∞–π–ª—ã –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
 */
function validateOpenApiFiles() {
  console.log('üîç –í–∞–ª–∏–¥–∞—Ü–∏—è OpenAPI —Ñ–∞–π–ª–æ–≤...\n');

  const apiDir = path.join(process.cwd(), 'api');
  const files = fs.readdirSync(apiDir).filter(file => file.startsWith('openapi-') && file.endsWith('.yaml'));

  let hasErrors = false;

  files.forEach(file => {
    const filePath = path.join(apiDir, file);
    console.log(`üìÑ –ü—Ä–æ–≤–µ—Ä—è—é ${file}...`);

    try {
      const content = fs.readFileSync(filePath, 'utf8');
      const spec = yaml.load(content);

      // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã OpenAPI
      if (!spec.openapi) {
        console.error(`  ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'openapi'`);
        hasErrors = true;
      }

      if (!spec.info || !spec.info.title || !spec.info.version) {
        console.error(`  ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å–µ–∫—Ü–∏—è 'info'`);
        hasErrors = true;
      }

      if (!spec.paths || Object.keys(spec.paths).length === 0) {
        console.error(`  ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –ø—É—Å—Ç—ã 'paths'`);
        hasErrors = true;
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è operationId
      const operationIds = new Set();
      Object.values(spec.paths).forEach(pathItem => {
        Object.values(pathItem).forEach(operation => {
          if (operation.operationId) {
            if (operationIds.has(operation.operationId)) {
              console.error(`  ‚ùå –î—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è operationId: ${operation.operationId}`);
              hasErrors = true;
            }
            operationIds.add(operation.operationId);
          }
        });
      });

      if (!hasErrors) {
        console.log(`  ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞`);
      }

    } catch (error) {
      console.error(`  ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: ${error.message}`);
      hasErrors = true;
    }

    console.log('');
  });

  if (hasErrors) {
    console.error('‚ùå –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ OpenAPI —Ñ–∞–π–ª–∞—Ö!');
    process.exit(1);
  } else {
    console.log('‚úÖ –í—Å–µ OpenAPI —Ñ–∞–π–ª—ã –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é!');
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  validateOpenApiFiles();
}

module.exports = { validateOpenApiFiles }; 