#!/usr/bin/env node

/**
 * ElevenLabs Backend Proxy - –ü—Ä–∏–º–µ—Ä —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç, –∫–∞–∫ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä –¥–ª—è ElevenLabs API
 * –Ω–∞ –≤–∞—à–µ–º backend. –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –æ—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –±—É–¥—É—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ —ç—Ç–æ—Ç –ø—Ä–æ–∫—Å–∏,
 * –∞ API-–∫–ª—é—á ElevenLabs –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node scripts/elevenlabs-backend-proxy.js [--port=3001] [--elevenlabs-key=your-key]
 */

const express = require('express');
const { createProxyMiddleware } = require('http-proxy-middleware');
const cors = require('cors');
const WebSocket = require('ws');
const http = require('http');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  port: process.argv.find(arg => arg.startsWith('--port='))?.split('=')[1] || 3001,
  elevenLabsKey: process.argv.find(arg => arg.startsWith('--elevenlabs-key='))?.split('=')[1] || process.env.ELEVENLABS_API_KEY,
  elevenLabsUrl: 'https://api.elevenlabs.io',
  elevenLabsWsUrl: 'wss://api.elevenlabs.io'
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞
if (!CONFIG.elevenLabsKey) {
  console.error('‚ùå –û—à–∏–±–∫–∞: API –∫–ª—é—á ElevenLabs –Ω–µ —É–∫–∞–∑–∞–Ω');
  console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
  console.log('  node scripts/elevenlabs-backend-proxy.js --elevenlabs-key=your-key');
  console.log('  –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è ELEVENLABS_API_KEY');
  process.exit(1);
}

// –°–æ–∑–¥–∞—ë–º Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
const app = express();
const server = http.createServer(app);

// Middleware
app.use(cors({
  origin: ['http://localhost:3000', 'http://localhost:3001', 'https://your-frontend-domain.com'],
  credentials: true
}));

app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
  console.log(`üì° ${req.method} ${req.path} - ${new Date().toISOString()}`);
  next();
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
app.get('/health', (req, res) => {
  res.json({
    status: 'ok',
    timestamp: new Date().toISOString(),
    elevenLabsUrl: CONFIG.elevenLabsUrl,
    proxyActive: true
  });
});

// –ü—Ä–æ–∫—Å–∏ –¥–ª—è REST API ElevenLabs
const elevenLabsProxy = createProxyMiddleware({
  target: CONFIG.elevenLabsUrl,
  changeOrigin: true,
  pathRewrite: {
    '^/elevenlabs-proxy': '' // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –ø—Ä–æ–∫—Å–∏
  },
  onProxyReq: (proxyReq, req, res) => {
    // –î–æ–±–∞–≤–ª—è–µ–º API –∫–ª—é—á ElevenLabs
    proxyReq.setHeader('xi-api-key', CONFIG.elevenLabsKey);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    console.log(`üîÑ –ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ: ${req.method} ${req.path} -> ${CONFIG.elevenLabsUrl}${proxyReq.path}`);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    proxyReq.setHeader('X-Proxy-By', 'ElevenLabs-Backend-Proxy');
    proxyReq.setHeader('X-Original-URL', req.url);
  },
  onProxyRes: (proxyRes, req, res) => {
    // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    console.log(`‚úÖ –û—Ç–≤–µ—Ç: ${req.method} ${req.path} - ${proxyRes.statusCode}`);
    
    // –î–æ–±–∞–≤–ª—è–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
    proxyRes.headers['Access-Control-Allow-Origin'] = '*';
    proxyRes.headers['Access-Control-Allow-Methods'] = 'GET, POST, PUT, DELETE, OPTIONS';
    proxyRes.headers['Access-Control-Allow-Headers'] = 'Content-Type, Authorization, xi-api-key';
  },
  onError: (err, req, res) => {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏: ${err.message}`);
    res.status(500).json({
      error: 'Proxy error',
      message: err.message,
      timestamp: new Date().toISOString()
    });
  }
});

// –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ–∫—Å–∏ –∫–æ –≤—Å–µ–º –∑–∞–ø—Ä–æ—Å–∞–º –∫ /elevenlabs-proxy
app.use('/elevenlabs-proxy', elevenLabsProxy);

// WebSocket –ø—Ä–æ–∫—Å–∏ –¥–ª—è real-time —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
const wss = new WebSocket.Server({ 
  server,
  path: '/elevenlabs-proxy/ws'
});

wss.on('connection', (ws, req) => {
  console.log(`üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${req.url}`);
  
  // –°–æ–∑–¥–∞—ë–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ ElevenLabs
  const elevenLabsWs = new WebSocket(CONFIG.elevenLabsWsUrl, {
    headers: {
      'xi-api-key': CONFIG.elevenLabsKey
    }
  });
  
  // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∫ ElevenLabs
  ws.on('message', (message) => {
    console.log(`üì§ –ö–ª–∏–µ–Ω—Ç -> ElevenLabs: ${message.toString().substring(0, 100)}...`);
    if (elevenLabsWs.readyState === WebSocket.OPEN) {
      elevenLabsWs.send(message);
    }
  });
  
  // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç ElevenLabs –∫ –∫–ª–∏–µ–Ω—Ç—É
  elevenLabsWs.on('message', (message) => {
    console.log(`üì• ElevenLabs -> –ö–ª–∏–µ–Ω—Ç: ${message.toString().substring(0, 100)}...`);
    if (ws.readyState === WebSocket.OPEN) {
      ws.send(message);
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  ws.on('error', (error) => {
    console.error(`‚ùå WebSocket –æ—à–∏–±–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞: ${error.message}`);
  });
  
  elevenLabsWs.on('error', (error) => {
    console.error(`‚ùå WebSocket –æ—à–∏–±–∫–∞ ElevenLabs: ${error.message}`);
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
  ws.on('close', () => {
    console.log('üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –∑–∞–∫—Ä—ã—Ç–æ');
    if (elevenLabsWs.readyState === WebSocket.OPEN) {
      elevenLabsWs.close();
    }
  });
  
  elevenLabsWs.on('close', () => {
    console.log('üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ ElevenLabs –∑–∞–∫—Ä—ã—Ç–æ');
    if (ws.readyState === WebSocket.OPEN) {
      ws.close();
    }
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞
server.on('error', (error) => {
  console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${error.message}`);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
server.listen(CONFIG.port, () => {
  console.log('üöÄ ElevenLabs Backend Proxy –∑–∞–ø—É—â–µ–Ω');
  console.log(`üìç –ü–æ—Ä—Ç: ${CONFIG.port}`);
  console.log(`üéØ ElevenLabs URL: ${CONFIG.elevenLabsUrl}`);
  console.log(`üîå WebSocket URL: ${CONFIG.elevenLabsWsUrl}`);
  console.log(`‚úÖ API –∫–ª—é—á: ${CONFIG.elevenLabsKey ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
  console.log('');
  console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:');
  console.log(`  GET  /health - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞`);
  console.log(`  ALL  /elevenlabs-proxy/* - –ü—Ä–æ–∫—Å–∏ –∫ ElevenLabs API`);
  console.log(`  WSS  /elevenlabs-proxy/ws - WebSocket –ø—Ä–æ–∫—Å–∏`);
  console.log('');
  console.log('üîß –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C');
});

// Graceful shutdown
process.on('SIGINT', () => {
  console.log('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...');
  server.close(() => {
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    process.exit(0);
  });
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
module.exports = {
  app,
  server,
  wss,
  CONFIG
}; 