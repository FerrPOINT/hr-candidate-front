const fs = require('fs');
const path = require('path');

function rmDirRecursive(dir) {
  if (fs.existsSync(dir)) {
    fs.rmSync(dir, { recursive: true, force: true });
    return true;
  }
  return false;
}

function ensureDir(dir) {
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true });
  }
}

// –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ generated-src/client –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π
const generatedDir = path.join(process.cwd(), 'generated-src');
const clientDir = path.join(generatedDir, 'client');

console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞...');
console.log('   –ü—É—Ç—å:', clientDir);

// –£–¥–∞–ª—è–µ–º –≤–µ—Å—å clientDir, –≤–∫–ª—é—á–∞—è apis, models, base/common –∏ —Å–ª—É–∂–µ–±–Ω—ã–µ —Ñ–∞–π–ª—ã
const removed = rmDirRecursive(clientDir);
if (removed) {
  console.log('   –£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞:', clientDir);
} else {
  console.log('   –ü–∞–ø–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –Ω–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å');
}

// –ü–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º –ø—É—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
ensureDir(clientDir);
ensureDir(path.join(clientDir, 'apis'));
ensureDir(path.join(clientDir, 'models'));
console.log('   –°–æ–∑–¥–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: apis/, models/');

console.log('‚úÖ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'); 