const { spawn } = require('child_process');
const { generateCommand, getDomainDescription, validateDomainFile } = require('./api-config');

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç API –∫–ª–∏–µ–Ω—Ç –¥–ª—è –æ–¥–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞
 */
async function generateSingleApi(domain) {
  console.log(`üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è API –¥–ª—è –¥–æ–º–µ–Ω–∞: ${domain}`);
  console.log(`üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${getDomainDescription(domain)}\n`);

  // –í–∞–ª–∏–¥–∞—Ü–∏—è
  const validation = validateDomainFile(domain);
  if (!validation.valid) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${validation.error}`);
    process.exit(1);
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã
  const command = generateCommand(domain);
  console.log(`üîß –ö–æ–º–∞–Ω–¥–∞: ${command.join(' ')}\n`);

  return new Promise((resolve, reject) => {
    const child = spawn(command[0], command.slice(1), {
      stdio: 'inherit',
      shell: true,
      cwd: process.cwd()
    });

    child.on('close', (code) => {
      if (code === 0) {
        console.log(`\n‚úÖ API –¥–ª—è –¥–æ–º–µ–Ω–∞ '${domain}' —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!`);
        resolve();
      } else {
        console.error(`\n‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ API –¥–ª—è –¥–æ–º–µ–Ω–∞ '${domain}' (–∫–æ–¥ ${code})`);
        reject(new Error(`Generation failed with code ${code}`));
      }
    });

    child.on('error', (error) => {
      console.error(`\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞:`, error);
      reject(error);
    });
  });
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const domain = process.argv[2];
  
  if (!domain) {
    console.error('‚ùå –£–∫–∞–∂–∏—Ç–µ –¥–æ–º–µ–Ω –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏');
    console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node generate-single-api.js <domain>');
    console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ–º–µ–Ω—ã:', require('./api-config').getAllDomains().join(', '));
    process.exit(1);
  }

  generateSingleApi(domain).catch(error => {
    console.error('‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π:', error);
    process.exit(1);
  });
}

module.exports = { generateSingleApi }; 