#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–∞—Ç—á–∏–Ω–≥–∞ ElevenLabs SDK
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:
 * 1. –ù–∞—Ö–æ–¥–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–∞–∫–µ—Ç @elevenlabs/react
 * 2. –°–æ–∑–¥–∞—ë—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
 * 3. –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞ —á–µ—Ä–µ–∑ backend
 * 4. –°–æ–∑–¥–∞—ë—Ç –ø–∞—Ç—á-—Ñ–∞–π–ª –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node scripts/patch-elevenlabs-sdk.js [--backend-url=http://localhost:8080] [--restore]
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  packageName: '@elevenlabs/react',
  backendUrl: process.argv.find(arg => arg.startsWith('--backend-url='))?.split('=')[1] || 'http://localhost:8080',
  restore: process.argv.includes('--restore'),
  patchDir: path.join(__dirname, '..', 'patches'),
  backupDir: path.join(__dirname, '..', 'node_modules', '@elevenlabs', 'react-backup')
};

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function logError(message) {
  log(`‚ùå ${message}`, 'red');
}

function logSuccess(message) {
  log(`‚úÖ ${message}`, 'green');
}

function logInfo(message) {
  log(`‚ÑπÔ∏è  ${message}`, 'blue');
}

function logWarning(message) {
  log(`‚ö†Ô∏è  ${message}`, 'yellow');
}

/**
 * –ù–∞—Ö–æ–¥–∏—Ç –ø—É—Ç—å –∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–º—É –ø–∞–∫–µ—Ç—É
 */
function findPackagePath() {
  try {
    const packagePath = require.resolve(CONFIG.packageName);
    return path.dirname(packagePath);
  } catch (error) {
    logError(`–ü–∞–∫–µ—Ç ${CONFIG.packageName} –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ: npm install ${CONFIG.packageName}`);
    process.exit(1);
  }
}

/**
 * –°–æ–∑–¥–∞—ë—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–∞–∫–µ—Ç–∞
 */
function createBackup(packagePath) {
  logInfo('–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...');
  
  if (fs.existsSync(CONFIG.backupDir)) {
    logWarning('–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    return;
  }
  
  try {
    // –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±—ç–∫–∞–ø–∞
    fs.mkdirSync(CONFIG.backupDir, { recursive: true });
    
    // –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
    copyDirectory(packagePath, CONFIG.backupDir);
    
    logSuccess('–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞');
  } catch (error) {
    logError(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: ${error.message}`);
    process.exit(1);
  }
}

/**
 * –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–∞–∫–µ—Ç –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
 */
function restoreFromBackup(packagePath) {
  logInfo('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...');
  
  if (!fs.existsSync(CONFIG.backupDir)) {
    logError('–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    process.exit(1);
  }
  
  try {
    // –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞–∫–µ—Ç
    fs.rmSync(packagePath, { recursive: true, force: true });
    
    // –ö–æ–ø–∏—Ä—É–µ–º –∏–∑ –±—ç–∫–∞–ø–∞
    copyDirectory(CONFIG.backupDir, packagePath);
    
    logSuccess('–ü–∞–∫–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏');
  } catch (error) {
    logError(`–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: ${error.message}`);
    process.exit(1);
  }
}

/**
 * –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∫–æ–ø–∏—Ä—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
 */
function copyDirectory(src, dest) {
  if (!fs.existsSync(dest)) {
    fs.mkdirSync(dest, { recursive: true });
  }
  
  const entries = fs.readdirSync(src, { withFileTypes: true });
  
  for (const entry of entries) {
    const srcPath = path.join(src, entry.name);
    const destPath = path.join(dest, entry.name);
    
    if (entry.isDirectory()) {
      copyDirectory(srcPath, destPath);
    } else {
      fs.copyFileSync(srcPath, destPath);
    }
  }
}

/**
 * –ü–∞—Ç—á–∏—Ç —Ñ–∞–π–ª—ã –ø–∞–∫–µ—Ç–∞
 */
function patchPackage(packagePath) {
  logInfo('–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ç—á–µ–π...');
  
  const patches = [
    {
      file: 'dist/index.js',
      description: '–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª SDK',
      patches: [
        {
          find: /https:\/\/api\.elevenlabs\.io/g,
          replace: `${CONFIG.backendUrl}/elevenlabs-proxy`
        },
        {
          find: /wss:\/\/api\.elevenlabs\.io/g,
          replace: `${CONFIG.backendUrl.replace('https://', 'wss://').replace('http://', 'ws://')}/elevenlabs-proxy/ws`
        }
      ]
    },
    {
      file: 'dist/index.d.ts',
      description: 'TypeScript –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è',
      patches: [
        {
          find: /https:\/\/api\.elevenlabs\.io/g,
          replace: `${CONFIG.backendUrl}/elevenlabs-proxy`
        }
      ]
    }
  ];
  
  for (const patch of patches) {
    const filePath = path.join(packagePath, patch.file);
    
    if (!fs.existsSync(filePath)) {
      logWarning(`–§–∞–π–ª ${patch.file} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
      continue;
    }
    
    try {
      let content = fs.readFileSync(filePath, 'utf8');
      let modified = false;
      
      for (const { find, replace } of patch.patches) {
        if (find.test(content)) {
          content = content.replace(find, replace);
          modified = true;
        }
      }
      
      if (modified) {
        fs.writeFileSync(filePath, content, 'utf8');
        logSuccess(`–ü–∞—Ç—á –ø—Ä–∏–º–µ–Ω—ë–Ω –∫ ${patch.file}`);
      } else {
        logWarning(`–ü–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ ${patch.file}`);
      }
    } catch (error) {
      logError(`–û—à–∏–±–∫–∞ –ø–∞—Ç—á–∏–Ω–≥–∞ ${patch.file}: ${error.message}`);
    }
  }
}

/**
 * –°–æ–∑–¥–∞—ë—Ç –ø–∞—Ç—á-—Ñ–∞–π–ª –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
 */
function createPatchFile(packagePath) {
  logInfo('–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ç—á-—Ñ–∞–π–ª–∞...');
  
  if (!fs.existsSync(CONFIG.patchDir)) {
    fs.mkdirSync(CONFIG.patchDir, { recursive: true });
  }
  
  const patchFile = path.join(CONFIG.patchDir, 'elevenlabs-sdk.patch');
  
  try {
    // –°–æ–∑–¥–∞—ë–º diff –º–µ–∂–¥—É –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º –∏ –ø–∞—Ç—á–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π
    const diff = execSync(`diff -r "${CONFIG.backupDir}" "${packagePath}"`, { 
      encoding: 'utf8',
      stdio: ['pipe', 'pipe', 'pipe']
    }).stdout;
    
    if (diff) {
      fs.writeFileSync(patchFile, diff, 'utf8');
      logSuccess(`–ü–∞—Ç—á-—Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: ${patchFile}`);
    } else {
      logWarning('–ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã');
    }
  } catch (error) {
    logWarning('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞—Ç—á-—Ñ–∞–π–ª (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π)');
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–µ—Ä—Å–∏—é –ø–∞–∫–µ—Ç–∞
 */
function checkPackageVersion(packagePath) {
  try {
    const packageJson = JSON.parse(fs.readFileSync(path.join(packagePath, 'package.json'), 'utf8'));
    logInfo(`–í–µ—Ä—Å–∏—è –ø–∞–∫–µ—Ç–∞: ${packageJson.version}`);
    return packageJson.version;
  } catch (error) {
    logWarning('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–µ—Ä—Å–∏—é –ø–∞–∫–µ—Ç–∞');
    return 'unknown';
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
function main() {
  log('üîß ElevenLabs SDK Patcher', 'bright');
  log(`Backend URL: ${CONFIG.backendUrl}`, 'cyan');
  
  const packagePath = findPackagePath();
  logInfo(`–ü—É—Ç—å –∫ –ø–∞–∫–µ—Ç—É: ${packagePath}`);
  
  const version = checkPackageVersion(packagePath);
  
  if (CONFIG.restore) {
    restoreFromBackup(packagePath);
  } else {
    createBackup(packagePath);
    patchPackage(packagePath);
    createPatchFile(packagePath);
  }
  
  logSuccess('–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
  logInfo(`–î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: node scripts/patch-elevenlabs-sdk.js --restore`);
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  main();
}

module.exports = {
  patchPackage,
  createBackup,
  restoreFromBackup,
  findPackagePath
}; 