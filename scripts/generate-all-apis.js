const { spawn } = require('child_process');
const { getAllDomains, generateCommand, getDomainDescription, validateDomainFile } = require('./api-config');

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Å–µ API –∫–ª–∏–µ–Ω—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */
async function generateAllApis() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö API –∫–ª–∏–µ–Ω—Ç–æ–≤...\n');

  const domains = getAllDomains();
  console.log(`üì¶ –ë—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –¥–æ–º–µ–Ω–æ–≤: ${domains.length}`);
  domains.forEach(domain => {
    console.log(`  ‚Ä¢ ${domain}: ${getDomainDescription(domain)}`);
  });
  console.log('');

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
  console.log('üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤...');
  for (const domain of domains) {
    const validation = validateDomainFile(domain);
    if (!validation.valid) {
      console.error(`‚ùå ${domain}: ${validation.error}`);
      process.exit(1);
    }
    console.log(`‚úÖ ${domain}: —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω`);
  }
  console.log('');

  // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
  const promises = domains.map(domain => generateApiDomain(domain));
  
  try {
    await Promise.all(promises);
    console.log('\nüéâ –í—Å–µ API –∫–ª–∏–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!');
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`  ‚Ä¢ –î–æ–º–µ–Ω–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${domains.length}`);
    console.log(`  ‚Ä¢ –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ`);
    console.log(`  ‚Ä¢ –°—Ç–∞—Ç—É—Å: ‚úÖ –£—Å–ø–µ—à–Ω–æ`);
    
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ API –∫–ª–∏–µ–Ω—Ç–æ–≤:', error.message);
    process.exit(1);
  }
}

function generateApiDomain(domain) {
  return new Promise((resolve, reject) => {
    console.log(`üì¶ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ${domain}...`);
    
    const command = generateCommand(domain);
    const child = spawn(command[0], command.slice(1), {
      stdio: 'pipe',
      shell: true,
      cwd: process.cwd()
    });

    let output = '';
    let errorOutput = '';

    child.stdout.on('data', (data) => {
      output += data.toString();
    });

    child.stderr.on('data', (data) => {
      errorOutput += data.toString();
    });

    child.on('close', (code) => {
      if (code === 0) {
        console.log(`‚úÖ ${domain} - —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω`);
        resolve();
      } else {
        console.error(`‚ùå ${domain} - –æ—à–∏–±–∫–∞ (–∫–æ–¥ ${code})`);
        if (errorOutput) {
          console.error(`   –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: ${errorOutput.substring(0, 200)}...`);
        }
        reject(new Error(`–ì–µ–Ω–µ—Ä–∞—Ü–∏—è ${domain} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π ${code}`));
      }
    });

    child.on('error', (error) => {
      console.error(`‚ùå ${domain} - –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:`, error.message);
      reject(error);
    });
  });
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  generateAllApis();
}

module.exports = { generateAllApis }; 